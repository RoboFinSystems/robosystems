#!/bin/bash
# =============================================================================
# ROBOSYSTEMS SERVICE AWS SECRETS MANAGER SETUP SCRIPT
# =============================================================================
#
# This script sets up the unified RoboSystems secrets in AWS Secrets Manager.
# These secrets are shared across all RoboSystems applications (backend service,
# RoboLedger frontend, RoboInvestor frontend). All database and infrastructure
# secrets are automatically generated by CloudFormation templates.
#
# Usage:
#   just setup-aws
#   or directly: bin/setup/aws
#
# Base secrets created:
# - robosystems/prod (shared across all production apps)
# - robosystems/staging (shared across all staging apps)
#
# =============================================================================

set -e

echo "=== RoboSystems AWS Secrets Manager Setup ==="
echo ""

# =============================================================================
# SECRET CONFIGURATION REFERENCE
# =============================================================================
#
# This script creates AWS Secrets Manager secrets with the following structure:
#
# PRODUCTION (robosystems/prod):
# - ENVIRONMENT: prod
# - BILLING_ENABLED: Set to "false" for forked/self-hosted deployments
# - ANTHROPIC_API_KEY, OPENAI_API_KEY: AI service keys
# - INTUIT_*, PLAID_*: External service integrations (production)
# - NEXTAUTH_*: Authentication configuration
# - ROBOSYSTEMS_*: Internal API configuration
# - Feature flags and worker configuration
#
# STAGING (robosystems/staging):
# - Same structure as production but with staging/sandbox endpoints
# - ENVIRONMENT: staging
# - External services point to sandbox environments
#
# =============================================================================

# =============================================================================
# AWS SECRETS MANAGER SETUP FUNCTIONS
# =============================================================================

function create_production_secret() {
    echo "Creating production secret..."

    # Check if secret already exists
    if aws secretsmanager describe-secret --secret-id "robosystems/prod" >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Production secret already exists. Updating values..."
    else
        # Create Production Secret
        aws secretsmanager create-secret \
            --name "robosystems/prod" \
            --description "RoboSystems production environment secrets" \
            --tags Key=Environment,Value=prod Key=Service,Value=RoboSystems Key=Component,Value=Secrets
    fi

    echo "Setting production secret values..."

    # Set Production Secret Values
    aws secretsmanager put-secret-value \
        --secret-id "robosystems/prod" \
        --secret-string '{
        "ANTHROPIC_API_KEY": "sk-ant-api03-your_anthropic_api_key_here",
        "BILLING_ENABLED": "false",
        "BILLING_PREMIUM_PLANS_ENABLED": "false",
        "CONNECTION_CREDENTIALS_KEY": "your_connection_creds_key_here_use_openssl_rand_base64_32",
        "CONNECTION_PLAID_ENABLED": "true",
        "CONNECTION_QUICKBOOKS_ENABLED": "true",
        "CONNECTION_SEC_ENABLED": "true",
        "INTUIT_CLIENT_ID": "Intuit.ipp.application.your_client_id",
        "INTUIT_CLIENT_SECRET": "your_quickbooks_client_secret_here",
        "INTUIT_ENVIRONMENT": "production",
        "INTUIT_REDIRECT_URI": "https://api.robosystems.ai/auth/callback",
        "JWT_SECRET_KEY": "your_production_jwt_secret_key_here_use_openssl_rand_base64_32",
        "KUZU_BACKUP_ENCRYPTION_KEY": "your_production_kuzu_backup_encryption_key_here_use_openssl_rand_base64_32",
        "KUZU_BACKUP_ENCRYPTION_PASSWORD": "your_production_kuzu_backup_password_here",
        "LOAD_SHEDDING_ENABLED": "true",
        "USER_GRAPHS_DEFAULT_LIMIT": "5",
        "OPENFIGI_API_KEY": "your_openfigi_api_key_here",
        "OTEL_ENABLED": "true",
        "PLAID_CLIENT_ID": "your_plaid_client_id_here",
        "PLAID_CLIENT_SECRET": "your_plaid_client_secret_here",
        "PLAID_ENVIRONMENT": "production",
        "RATE_LIMIT_ENABLED": "true",
        "CAPTCHA_ENABLED": "true",
        "EMAIL_VERIFICATION_ENABLED": "true",
        "SEC_GOV_USER_AGENT": "RoboSystems/1.0 (contact@robosystems.ai)",
        "SECURITY_AUDIT_ENABLED": "true",
        "SSE_ENABLED": "true",
        "TURNSTILE_SECRET_KEY": "your_cloudflare_turnstile_secret_key",
        "TURNSTILE_SITE_KEY": "your_cloudflare_turnstile_site_key",
        "USER_REGISTRATION_ENABLED": "true"
    }'

    echo "Production secret created successfully!"
}

function create_staging_secret() {
    echo "Creating staging secret..."

    # Check if secret already exists
    if aws secretsmanager describe-secret --secret-id "robosystems/staging" >/dev/null 2>&1; then
        echo "‚ö†Ô∏è  Staging secret already exists. Updating values..."
    else
        # Create Staging Secret
        aws secretsmanager create-secret \
            --name "robosystems/staging" \
            --description "RoboSystems staging environment secrets" \
            --tags Key=Environment,Value=staging Key=Service,Value=RoboSystems Key=Component,Value=Secrets
    fi

    echo "Setting staging secret values..."

    # Set Staging Secret Values
    aws secretsmanager put-secret-value \
        --secret-id "robosystems/staging" \
        --secret-string '{
        "ANTHROPIC_API_KEY": "sk-ant-api03-your_anthropic_api_key_here",
        "BILLING_ENABLED": "false",
        "BILLING_PREMIUM_PLANS_ENABLED": "false",
        "CONNECTION_CREDENTIALS_KEY": "dev-connection-creds-key-12345678901234567890abcdef",
        "CONNECTION_PLAID_ENABLED": "true",
        "CONNECTION_QUICKBOOKS_ENABLED": "true",
        "CONNECTION_SEC_ENABLED": "true",
        "INTUIT_CLIENT_ID": "Intuit.ipp.application.your_sandbox_client_id",
        "INTUIT_CLIENT_SECRET": "your_quickbooks_sandbox_client_secret_here",
        "INTUIT_ENVIRONMENT": "sandbox",
        "INTUIT_REDIRECT_URI": "https://staging.api.robosystems.ai/auth/callback",
        "JWT_SECRET_KEY": "your_staging_jwt_secret_key_here_use_openssl_rand_base64_32",
        "KUZU_BACKUP_ENCRYPTION_KEY": "your_staging_kuzu_backup_encryption_key_here_use_openssl_rand_base64_32",
        "KUZU_BACKUP_ENCRYPTION_PASSWORD": "your_staging_kuzu_backup_password_here",
        "LOAD_SHEDDING_ENABLED": "true",
        "USER_GRAPHS_DEFAULT_LIMIT": "5",
        "OPENFIGI_API_KEY": "your_openfigi_api_key_here",
        "OTEL_ENABLED": "true",
        "PLAID_CLIENT_ID": "your_plaid_sandbox_client_id_here",
        "PLAID_CLIENT_SECRET": "your_plaid_sandbox_client_secret_here",
        "PLAID_ENVIRONMENT": "sandbox",
        "RATE_LIMIT_ENABLED": "true",
        "CAPTCHA_ENABLED": "false",
        "EMAIL_VERIFICATION_ENABLED": "false",
        "SEC_GOV_USER_AGENT": "RoboSystems-Staging/1.0 (contact@robosystems.ai)",
        "SECURITY_AUDIT_ENABLED": "true",
        "SSE_ENABLED": "true",
        "TURNSTILE_SECRET_KEY": "your_cloudflare_turnstile_secret_key",
        "TURNSTILE_SITE_KEY": "your_cloudflare_turnstile_site_key",
        "USER_REGISTRATION_ENABLED": "true"
    }'

    echo "Staging secret created successfully!"
}

# =============================================================================
# HELPER FUNCTIONS
# =============================================================================

function check_prerequisites() {
    echo "Checking prerequisites..."

    # Check AWS CLI
    if ! command -v aws >/dev/null 2>&1; then
        echo "‚ùå AWS CLI is not installed. Please install it first."
        echo "   Visit: https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2.html"
        exit 1
    fi

    # Check AWS credentials
    if ! aws sts get-caller-identity >/dev/null 2>&1; then
        echo "‚ùå AWS credentials not configured or invalid."
        echo "   Run: aws configure"
        exit 1
    fi

    echo "‚úÖ Prerequisites check passed"
    echo ""
}

# =============================================================================
# MAIN SCRIPT EXECUTION
# =============================================================================

function main() {
    check_prerequisites

    echo "This script will create RoboSystems secrets in AWS Secrets Manager."
    echo ""
    echo "‚ö†Ô∏è  WARNING: Make sure to update the placeholder values in this script"
    echo "   with your actual API keys and secrets before running!"
    echo ""

    # Show current AWS identity
    local aws_identity=$(aws sts get-caller-identity --query 'Account' --output text 2>/dev/null)
    echo "AWS Account: $aws_identity"
    echo ""

    read -p "Do you want to continue? (y/N): " -n 1 -r
    echo ""

    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Starting secrets setup..."
        echo ""

        create_production_secret
        echo ""
        create_staging_secret
        echo ""

        echo "‚úÖ AWS Secrets Manager setup completed!"
        echo ""
        echo "üìã Next steps:"
        echo "1. Edit this script to replace placeholder values with real secrets"
        echo "2. Re-run this script to update the secrets with actual values"
        echo "3. Deploy your CloudFormation templates"
        echo "4. Test the application with the new secrets"
        echo ""
        echo "üîç View secrets:"
        echo "   aws secretsmanager get-secret-value --secret-id robosystems/prod"
        echo "   aws secretsmanager get-secret-value --secret-id robosystems/staging"
    else
        echo "Setup cancelled."
        exit 0
    fi
}

# Run main function if script is executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
