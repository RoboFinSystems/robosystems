Description: RoboSystems Kuzu Writers - EC2 Tier Auto Scaling Group

Parameters:
  # Environment
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - staging
    Description: Environment name (prod or staging)
    ConstraintDescription: Must be prod or staging

  # Infrastructure & Networking
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where instances will be deployed
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: Must be a valid CIDR block
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs for EC2 instances (IMPORTANT - Workflow will pass SINGLE subnet to ensure volume persistence in one AZ)
  ValkeyClientSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group ID for Valkey/Redis client access (REQUIRED)

  # Instance Configuration
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Amazon Linux 2023 ARM64 AMI ID
    ConstraintDescription: Must be a valid AMI ID

  # Auto-scaling Configuration
  MinInstances:
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 100
    Description: Minimum number of writer instances (0 for cost-saving mode)
    ConstraintDescription: Must be between 0 and 100
  MaxInstances:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 100
    Description: Maximum number of writer instances
    ConstraintDescription: Must be at least 1

  # Kuzu Configuration
  WriterTier:
    Type: String
    Default: standard
    AllowedValues:
      - standard
      - enterprise
      - premium
      - shared
    Description: Writer tier determines capacity allocation per instance
    ConstraintDescription: Must be standard, enterprise, premium, or shared
  SharedRepositories:
    Type: String
    Default: ""
    Description: Comma-separated list of shared repositories to host (e.g., sec,industry,economic). Only used when WriterTier is shared
    AllowedPattern: "^$|^[a-z]+(,[a-z]+)*$"
    ConstraintDescription: Must be a comma-separated list of repository names (sec, industry, economic, regulatory, market, esg)

  # Tier Configuration Parameters (passed from kuzu.yml via workflow)
  InstanceType:
    Type: String
    Description: EC2 instance type for this tier
    AllowedPattern: ^[a-z][0-9][a-z]\.(micro|small|medium|large|xlarge|2xlarge|4xlarge)$

  # Docker Configuration
  ECRImageTag:
    Type: String
    Description: Docker image tag for Kuzu containers
    Default: latest

  # Lambda Configuration
  VolumeManagerFunctionArn:
    Type: String
    Description: ARN of the Volume Manager Lambda function from volumes stack
    AllowedPattern: ^arn:aws:lambda:[a-z0-9-]+:[0-9]+:function:.*$
    ConstraintDescription: Must be a valid Lambda function ARN
  VolumeDetachmentTopicArn:
    Type: String
    Description: ARN of the Volume Detachment SNS topic from volumes stack
    AllowedPattern: ^arn:aws:sns:[a-z0-9-]+:[0-9]+:.*$
    ConstraintDescription: Must be a valid SNS topic ARN

  # Monitoring
  SNSAlertEmail:
    Type: String
    Description: Email address for database alerts
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
    ConstraintDescription: Must be a valid email address

  # Tagging Configuration
  ServiceTag:
    Type: String
    Default: RoboSystems
    Description: Service tag for resource identification and billing
  ComponentTag:
    Type: String
    Default: KuzuWriter
    Description: Component tag for resource identification and billing

Mappings:
  # Environment name capitalization mapping (still needed for naming)
  EnvironmentMap:
    staging:
      Capitalized: Staging
    prod:
      Capitalized: Prod

Conditions:
  HasMinInstances: !Not [!Equals [!Ref MinInstances, 0]]
  IsSharedWriter: !Equals [!Ref WriterTier, "shared"]

Resources:
  # ========================================
  # SNS TOPICS
  # ========================================

  # SNS Topic for database alerts
  KuzuAlertTopic:
    Type: AWS::SNS::Topic
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TopicName: !Sub "robosystems-kuzu-${WriterTier}-${Environment}-alerts"
      DisplayName: !Sub "RoboSystems Kuzu ${WriterTier} ${Environment} Alerts"
      Subscription:
        - Endpoint: !Ref SNSAlertEmail
          Protocol: email
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: CreatedBy
          Value: CloudFormation

  # ========================================
  # NETWORKING & SECURITY
  # ========================================

  # Security Group for Writers
  WriterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      GroupName: !Sub "${AWS::StackName}-writers-sg"
      GroupDescription: Security group for Kuzu database writers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          CidrIp: !Ref VpcCidr
          Description: Allow Kuzu API access from VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-writers-sg"
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: CreatedBy
          Value: CloudFormation

  # ========================================
  # IAM ROLES & POLICIES
  # ========================================

  # IAM Role for Writers
  WriterInstanceRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RoleName: !Sub "${AWS::StackName}-writer-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
      Policies:
        - PolicyName: KuzuWriterPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-kuzu-${Environment}-instance-registry"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-kuzu-${Environment}-graph-registry"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-kuzu-${Environment}-volume-registry"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-kuzu-${Environment}-instance-registry/index/*"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-kuzu-${Environment}-graph-registry/index/*"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-kuzu-${Environment}-volume-registry/index/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${AWS::StackName}-backups/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${AWS::StackName}-backups"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  # Base secret: robosystems/prod or robosystems/staging
                  - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:robosystems/${Environment}-*"
                  # Extension secrets: robosystems/prod/s3, robosystems/prod/postgres, robosystems/prod/kuzu, etc.
                  - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:robosystems/${Environment}/*"
              # KMS permissions for AWS managed keys with service conditions
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource:
                  - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/secretsmanager"
                  - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ebs"
                  - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"
                Condition:
                  StringEquals:
                    "kms:ViaService":
                      - !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
                      - !Sub "ec2.${AWS::Region}.amazonaws.com"
                      - !Sub "ssm.${AWS::Region}.amazonaws.com"
              - Effect: Allow
                Action:
                  - autoscaling:SetInstanceHealth
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:SetInstanceProtection
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Ref VolumeManagerFunctionArn
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::robosystems-${Environment}-deployment/*"
                  - !Sub "arn:${AWS::Partition}:s3:::robosystems-${Environment}-deployment"
                  - !Sub "arn:${AWS::Partition}:s3:::robosystems-sec-processed-${Environment}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::robosystems-sec-processed-${Environment}"
              - Effect: Allow
                Action:
                  - ec2:CreateSnapshot
                  - ec2:CreateTags
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:DescribeVolumeStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - ec2:AttachVolume
                  - ec2:DetachVolume
                  - ec2:ModifyVolume
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: "*"
              - Effect: Allow
                Action:
                  - aps:RemoteWrite
                  - aps:QueryMetrics
                  - aps:GetLabels
                  - aps:GetSeries
                  - aps:GetMetricMetadata
                Resource: !Sub "arn:${AWS::Partition}:aps:${AWS::Region}:${AWS::AccountId}:workspace/*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: CreatedBy
          Value: CloudFormation

  # Instance Profile for Writers
  WriterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-writer-profile"
      Roles:
        - !Ref WriterInstanceRole

  # ========================================
  # COMPUTE RESOURCES
  # ========================================

  # Launch Template for Writers
  WriterLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-writer-template"
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt WriterInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref WriterSecurityGroup
          - !Ref ValkeyClientSecurityGroupId
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              Encrypted: true
              DeleteOnTermination: true
          # Data volume removed - now managed dynamically by Volume Manager
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "robosystems-kuzu-writer-${WriterTier}-${Environment}"
              - Key: Environment
                Value: !Ref Environment
              - Key: KuzuRole
                Value: writer
              - Key: WriterTier
                Value: !Ref WriterTier
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              set -e

              # Set environment variables
              echo "Setting environment variables..."

              # Get instance metadata with IMDSv2
              TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
              INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
              PRIVATE_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4)
              AZ=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/availability-zone)

              cat >> /etc/environment << EOF
              ENVIRONMENT=${Environment}
              KUZU_ROLE=writer
              WRITER_TIER=${WriterTier}
              CLUSTER_TIER=${WriterTier}
              KUZU_PORT=8001
              KUZU_ACCESS_PATTERN=api_writer
              KUZU_DATABASE_PATH=/data/kuzu-dbs
              AWS_DEFAULT_REGION=${AWS::Region}
              AWS_STACK_NAME=${AWS::StackName}
              INSTANCE_ID=$INSTANCE_ID
              PRIVATE_IP=$PRIVATE_IP
              $([ "${WriterTier}" = "shared" ] && [ -n "${SharedRepositories}" ] && echo "SHARED_REPOSITORIES=${SharedRepositories}")
              EOF

              # Ensure cfn-signal will run even if setup has issues
              trap '/opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource WriterAutoScalingGroup --region ${AWS::Region}' ERR

              # Export critical environment variables for the setup script
              export AWS_ACCOUNT_ID="${AWS::AccountId}"
              export ECR_URI="${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/robosystems"
              export ECR_IMAGE_TAG="${ECRImageTag}"
              export INSTANCE_REGISTRY_TABLE="robosystems-kuzu-${Environment}-instance-registry"
              export ALLOCATION_TABLE="robosystems-kuzu-${Environment}-graph-registry"
              export CLUSTER_TIER="${WriterTier}"
              export KUZU_NODE_TYPE="$(if [ "${WriterTier}" = "shared" ]; then echo "shared_master"; else echo "writer"; fi)"

              # Secrets will be fetched directly by the container from AWS Secrets Manager

              # Register instance in DynamoDB with cluster_tier
              echo "Registering instance in DynamoDB..."

              # Build the base item JSON
              if [ "${WriterTier}" = "shared" ] && [ -n "${SharedRepositories}" ]; then
                # Include repository_types for shared repositories (multiple)
                aws dynamodb put-item \
                  --table-name "$INSTANCE_REGISTRY_TABLE" \
                  --item "{
                    \"instance_id\": {\"S\": \"$INSTANCE_ID\"},
                    \"cluster_tier\": {\"S\": \"${WriterTier}\"},
                    \"private_ip\": {\"S\": \"$PRIVATE_IP\"},
                    \"stack_name\": {\"S\": \"${AWS::StackName}\"},
                    \"node_type\": {\"S\": \"writer\"},
                    \"status\": {\"S\": \"initializing\"},
                    \"database_count\": {\"N\": \"0\"},
                    \"max_databases\": {\"N\": \"10\"},
                    \"created_at\": {\"S\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"},
                    \"repository_types\": {\"S\": \"${SharedRepositories}\"}
                  }" \
                  --region ${AWS::Region}
              else
                # Standard writer without repository_type
                aws dynamodb put-item \
                  --table-name "$INSTANCE_REGISTRY_TABLE" \
                  --item "{
                    \"instance_id\": {\"S\": \"$INSTANCE_ID\"},
                    \"cluster_tier\": {\"S\": \"${WriterTier}\"},
                    \"private_ip\": {\"S\": \"$PRIVATE_IP\"},
                    \"stack_name\": {\"S\": \"${AWS::StackName}\"},
                    \"node_type\": {\"S\": \"writer\"},
                    \"status\": {\"S\": \"initializing\"},
                    \"database_count\": {\"N\": \"0\"},
                    \"max_databases\": {\"N\": \"10\"},
                    \"created_at\": {\"S\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}
                  }" \
                  --region ${AWS::Region}
              fi

              if [ $? -eq 0 ]; then
                echo "Successfully registered instance in DynamoDB"
              else
                echo "WARNING: Failed to register instance in DynamoDB"
                # Continue anyway - instance can still function
              fi

              # Register shared repositories in graph registry if applicable
              if [ "${WriterTier}" = "shared" ] && [ -n "${SharedRepositories}" ]; then
                echo "Registering shared repositories in graph registry..."
                # Convert comma-separated list to space-separated for iteration
                REPOS_LIST=$(echo "${SharedRepositories}" | tr ',' ' ')
                for repo in $REPOS_LIST; do
                  repo=$(echo "$repo" | xargs) # Trim whitespace
                  if [ -n "$repo" ]; then
                    echo "Registering shared repository: $repo"
                    aws dynamodb put-item \
                      --table-name "robosystems-kuzu-${Environment}-graph-registry" \
                      --item "{
                        \"graph_id\": {\"S\": \"$repo\"},
                        \"instance_id\": {\"S\": \"$INSTANCE_ID\"},
                        \"status\": {\"S\": \"active\"},
                        \"repository_type\": {\"S\": \"shared\"},
                        \"created_at\": {\"S\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"},
                        \"entity_id\": {\"S\": \"shared_$repo\"}
                      }" \
                      --region ${AWS::Region} || echo "WARNING: Failed to register shared repository $repo"
                  fi
                done
              fi

              # Download and execute setup script
              aws s3 cp s3://robosystems-${Environment}-deployment/userdata/kuzu-writer.sh /tmp/kuzu-setup.sh || {
                echo "ERROR: Failed to download setup script from S3"
                exit 1
              }
              chmod +x /tmp/kuzu-setup.sh

              # Export required environment variables for the setup script
              export ENVIRONMENT="${Environment}"
              # Export SHARED_REPOSITORIES for shared repository deployments
              [ "${WriterTier}" = "shared" ] && [ -n "${SharedRepositories}" ] && export SHARED_REPOSITORIES="${SharedRepositories}"
              export INSTANCE_TYPE=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-type)
              export KUZU_PORT="8001"
              export WRITER_TIER="${WriterTier}"
              export AWS_ACCOUNT_ID="${AWS::AccountId}"
              export ECR_URI="${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/robosystems"
              export ECR_IMAGE_TAG="${ECRImageTag}"
              # Set CloudWatch namespace with environment suffix
              export CloudWatchNamespace="RoboSystemsKuzu/${EnvironmentCapitalized}"

              # Critical missing variables
              export AWS_REGION="${AWS::Region}"
              export AWS_DEFAULT_REGION="${AWS::Region}"

              # Set KUZU_NODE_TYPE based on WriterTier
              if [ "${WriterTier}" = "shared" ]; then
                export KUZU_NODE_TYPE="shared_master"
              else
                export KUZU_NODE_TYPE="writer"
                # Standard tier writers need REPOSITORY_TYPE set to "user"
                export REPOSITORY_TYPE="user"
              fi

              # Execute setup script with error handling
              # Temporarily disable exit on error to ensure cfn-signal runs
              set +e
              bash /tmp/kuzu-setup.sh
              SETUP_EXIT_CODE=$?

              if [ $SETUP_EXIT_CODE -eq 0 ]; then
                echo "Setup script completed successfully"
              else
                echo "ERROR: Setup script failed with exit code $SETUP_EXIT_CODE"
              fi

              # Signal CloudFormation (always runs)
              /opt/aws/bin/cfn-signal -e $SETUP_EXIT_CODE \
                --stack ${AWS::StackName} \
                --resource WriterAutoScalingGroup \
                --region ${AWS::Region}

              # Re-enable exit on error after cfn-signal
              set -e
            - # Tier config parameters removed - loaded from kuzu.yml
              EnvironmentCapitalized:
                !FindInMap [EnvironmentMap, !Ref Environment, Capitalized]

  # ========================================
  # AUTO SCALING
  # ========================================

  # Auto Scaling Group for Writers
  WriterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-writers-asg"
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      # DesiredCapacity intentionally omitted - managed by application
      NewInstancesProtectedFromScaleIn: true # Protect all new instances
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref WriterLaunchTemplate
        Version: !GetAtt WriterLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub "robosystems-kuzu-writer-${WriterTier}-${Environment}"
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
    CreationPolicy: !If
      - HasMinInstances
      - ResourceSignal:
          Count: !Ref MinInstances
          Timeout: PT15M
      - !Ref AWS::NoValue
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0 # Allow full flexibility since instances are protected
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: true
        SuspendProcesses:
          - AlarmNotification
          - AZRebalance
          - ScheduledActions

  # Scaling Policies
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DeletionPolicy: Delete
    Properties:
      AutoScalingGroupName: !Ref WriterAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0

  # ========================================
  # LIFECYCLE HOOKS
  # ========================================
  # Instance protection is automatically managed by the lifecycle hook
  # to prevent scale-in during volume operations. The Volume Manager Lambda
  # handles instance protection/unprotection based on database allocation status.

  # Lifecycle Hook for Instance Termination
  TerminationLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref WriterAutoScalingGroup
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 300
      NotificationTargetARN: !Ref VolumeDetachmentTopicArn
      RoleARN: !GetAtt LifecycleHookRole.Arn

  # IAM Role for Lifecycle Hook
  LifecycleHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LifecycleHookPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref VolumeDetachmentTopicArn

  # ========================================
  # MONITORING & ALARMS
  # ========================================

  # CloudWatch Alarms
  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AlarmName: !Sub "robosystems-kuzu-${WriterTier}-${Environment}-high-cpu"
      AlarmDescription: Triggers when CPU exceeds 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WriterAutoScalingGroup
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref KuzuAlertTopic

  HighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AlarmName: !Sub "robosystems-kuzu-${WriterTier}-${Environment}-high-memory"
      AlarmDescription: Triggers when memory usage exceeds 85% for 5 minutes
      MetricName: mem_used_percent
      Namespace: !Sub
        - "RoboSystemsKuzu/${EnvCapitalized}"
        - EnvCapitalized:
            !FindInMap [EnvironmentMap, !Ref Environment, Capitalized]
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: InstanceId
          Value: "*"
        - Name: Environment
          Value: !Ref Environment
        - Name: NodeType
          Value: !If
            - IsSharedWriter
            - "shared_master"
            - "writer"
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref KuzuAlertTopic

  # CloudWatch Alarms for Critical Metrics
  AllocationFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "robosystems-kuzu-${WriterTier}-${Environment}-allocation-failures"
      AlarmDescription: "Alert when database allocations fail"
      MetricName: AllocationFailures
      Namespace: !Sub
        - "RoboSystemsKuzu/${EnvCapitalized}"
        - EnvCapitalized:
            !FindInMap [EnvironmentMap, !Ref Environment, Capitalized]
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref KuzuAlertTopic

  HighCapacityUtilizationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "robosystems-kuzu-${WriterTier}-${Environment}-high-capacity-utilization"
      AlarmDescription: "Alert when capacity utilization exceeds 80%"
      MetricName: CapacityUtilization
      Namespace: !Sub
        - "RoboSystemsKuzu/${EnvCapitalized}"
        - EnvCapitalized:
            !FindInMap [EnvironmentMap, !Ref Environment, Capitalized]
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref KuzuAlertTopic

Outputs:
  WriterAutoScalingGroupName:
    Description: Name of the writer Auto Scaling Group
    Value: !Ref WriterAutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-asg-name"

  WriterSecurityGroupId:
    Description: Security group ID for writers
    Value: !Ref WriterSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-sg-id"
