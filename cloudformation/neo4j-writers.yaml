Description: RoboSystems Neo4j Writers - EC2 Tier Auto Scaling Group with Neo4j Community Edition

Parameters:
  # Environment
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - staging
    Description: Environment name (prod or staging)
    ConstraintDescription: Must be prod or staging

  # Infrastructure & Networking
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where instances will be deployed
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: Must be a valid CIDR block
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs for EC2 instances (IMPORTANT - Workflow will pass SINGLE subnet to ensure volume persistence in one AZ)
  ValkeyClientSecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group ID for Valkey/Redis client access (REQUIRED)

  # Instance Configuration
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Amazon Linux 2023 ARM64 AMI ID
    ConstraintDescription: Must be a valid AMI ID

  # Auto-scaling Configuration
  MinInstances:
    Type: Number
    Default: 1
    MinValue: 0
    MaxValue: 100
    Description: Minimum number of writer instances (0 for cost-saving mode)
    ConstraintDescription: Must be between 0 and 100
  MaxInstances:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 100
    Description: Maximum number of writer instances
    ConstraintDescription: Must be at least 1

  # Neo4j Configuration
  WriterTier:
    Type: String
    Default: neo4j-enterprise-xlarge
    AllowedValues:
      - neo4j-community-large
      - neo4j-enterprise-xlarge
    Description: Writer tier determines capacity allocation per instance
    ConstraintDescription: Must be neo4j-community-large or neo4j-enterprise-xlarge
  Neo4jVersion:
    Type: String
    Default: "5.15.0"
    Description: Neo4j version to deploy (Community for Enterprise tier, Enterprise for Premium tier)
    AllowedPattern: "^[0-9]+\\.[0-9]+\\.[0-9]+$"
    ConstraintDescription: Must be a valid semantic version (e.g., 5.15.0)
  Neo4jLicenseKey:
    Type: String
    Default: ""
    Description: Neo4j Enterprise license key (required for Premium tier, leave empty for Enterprise tier)
    NoEcho: true

  # Tier Configuration Parameters
  InstanceType:
    Type: String
    Description: EC2 instance type for this tier
    AllowedPattern: ^[a-z][0-9][a-z]\.(micro|small|medium|large|xlarge|2xlarge|4xlarge)$

  # Lambda Configuration
  VolumeManagerFunctionArn:
    Type: String
    Description: ARN of the Volume Manager Lambda function from volumes stack
    AllowedPattern: ^arn:aws:lambda:[a-z0-9-]+:[0-9]+:function:.*$
    ConstraintDescription: Must be a valid Lambda function ARN
  VolumeDetachmentTopicArn:
    Type: String
    Description: ARN of the Volume Detachment SNS topic from volumes stack
    AllowedPattern: ^arn:aws:sns:[a-z0-9-]+:[0-9]+:.*$
    ConstraintDescription: Must be a valid SNS topic ARN

  # Monitoring
  SNSAlertEmail:
    Type: String
    Description: Email address for database alerts
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
    ConstraintDescription: Must be a valid email address

  # Tagging Configuration
  ServiceTag:
    Type: String
    Default: RoboSystems
    Description: Service tag for resource identification and billing
  ComponentTag:
    Type: String
    Default: Neo4jWriter
    Description: Component tag for resource identification and billing

Mappings:
  EnvironmentMap:
    staging:
      Capitalized: Staging
    prod:
      Capitalized: Prod

Conditions:
  HasMinInstances: !Not [!Equals [!Ref MinInstances, 0]]
  IsPremiumTier: !Equals [!Ref WriterTier, neo4j-enterprise-xlarge]
  HasLicenseKey: !And
    - !Condition IsPremiumTier
    - !Not [!Equals [!Ref Neo4jLicenseKey, ""]]

Resources:
  # ========================================
  # SNS TOPICS
  # ========================================

  Neo4jAlertTopic:
    Type: AWS::SNS::Topic
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TopicName: !Sub "robosystems-neo4j-${WriterTier}-${Environment}-alerts"
      DisplayName: !Sub "RoboSystems Neo4j ${WriterTier} ${Environment} Alerts"
      Subscription:
        - Endpoint: !Ref SNSAlertEmail
          Protocol: email
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: CreatedBy
          Value: CloudFormation

  # ========================================
  # SECRETS MANAGEMENT
  # ========================================

  # Neo4j password secret (shared by all Neo4j instances in this tier)
  Neo4jPasswordSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Sub robosystems/${Environment}/neo4j/${WriterTier}
      Description: !Sub Neo4j database password for ${WriterTier} tier in ${Environment}
      SecretString: !Sub
        - |
          {
            "NEO4J_PASSWORD": "${Password}",
            "TIER": "${WriterTier}",
            "ENVIRONMENT": "${Environment}",
            "GENERATED_AT": "${GeneratedAt}"
          }
        - Password: !GetAtt Neo4jPasswordGenerator.Password
          GeneratedAt: !GetAtt Neo4jPasswordGenerator.GeneratedAt
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: Tier
          Value: !Ref WriterTier
        - Key: ManagedBy
          Value: CloudFormation

  # Neo4j Enterprise license key secret (Premium tier only)
  Neo4jLicenseSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasLicenseKey
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Sub robosystems/${Environment}/neo4j/${WriterTier}/license
      Description: !Sub Neo4j Enterprise license key for ${WriterTier} tier in ${Environment}
      SecretString: !Sub
        - |
          {
            "NEO4J_LICENSE_KEY": "${LicenseKey}",
            "TIER": "${WriterTier}",
            "ENVIRONMENT": "${Environment}",
            "EDITION": "enterprise"
          }
        - LicenseKey: !Ref Neo4jLicenseKey
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: Tier
          Value: !Ref WriterTier
        - Key: ManagedBy
          Value: CloudFormation

  # Custom resource to generate Neo4j password
  Neo4jPasswordGenerator:
    Type: Custom::PasswordGenerator
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      ServiceToken: !GetAtt PasswordGeneratorFunction.Arn
      Environment: !Ref Environment
      Tier: !Ref WriterTier

  PasswordGeneratorFunction:
    Type: AWS::Lambda::Function
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      FunctionName: !Sub "${AWS::StackName}-password-generator"
      Description: "Neo4j Password Generator Lambda - inline code (no S3)"
      Runtime: python3.12
      Handler: index.lambda_handler
      Role: !GetAtt PasswordGeneratorRole.Arn
      Timeout: 60
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-password-generator"
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: CreatedBy
          Value: CloudFormation
      Code:
        ZipFile: |
          import secrets
          import string
          import cfnresponse
          from datetime import datetime, timezone

          def generate_password(length=32):
              alphabet = string.ascii_letters + string.digits + "!@#$%^&*()-_=+[]{}|;:,.<>?"
              password = "".join(secrets.choice(alphabet) for _ in range(length))
              return password

          def lambda_handler(event, context):
              try:
                  request_type = event.get("RequestType", "")

                  if request_type == "Delete":
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return

                  resource_properties = event.get("ResourceProperties", {})
                  environment = resource_properties.get("Environment", "unknown")
                  tier = resource_properties.get("Tier", "unknown")

                  response_data = {
                      "Password": generate_password(),
                      "GeneratedAt": datetime.now(timezone.utc).isoformat(),
                  }

                  print(f"Generated Neo4j password for tier: {tier}, environment: {environment}")
                  print(f"Request Type: {request_type}")
                  print(f"Generated at: {response_data['GeneratedAt']}")

                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)

              except Exception as e:
                  print(f"Error generating Neo4j password: {str(e)}")
                  cfnresponse.send(
                      event,
                      context,
                      cfnresponse.FAILED,
                      {},
                      reason=f"Failed to generate password: {str(e)}",
                  )

  PasswordGeneratorRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-password-generator-role"
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: CreatedBy
          Value: CloudFormation

  # ========================================
  # NETWORKING & SECURITY
  # ========================================

  WriterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      GroupName: !Sub "${AWS::StackName}-writers-sg"
      GroupDescription: Security group for Neo4j database writers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8001
          ToPort: 8001
          CidrIp: !Ref VpcCidr
          Description: Allow Graph API access from VPC (unified interface for all backends)
        - IpProtocol: tcp
          FromPort: 7687
          ToPort: 7687
          CidrIp: !Ref VpcCidr
          Description: Allow Neo4j Bolt protocol access for database administration via bastion
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-writers-sg"
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: CreatedBy
          Value: CloudFormation

  # ========================================
  # IAM ROLES & POLICIES
  # ========================================

  WriterInstanceRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RoleName: !Sub "${AWS::StackName}-writer-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
      Policies:
        - PolicyName: Neo4jWriterPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-graph-${Environment}-instance-registry"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-graph-${Environment}-graph-registry"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-graph-${Environment}-volume-registry"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-graph-${Environment}-instance-registry/index/*"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-graph-${Environment}-graph-registry/index/*"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-graph-${Environment}-volume-registry/index/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${AWS::StackName}-backups/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${AWS::StackName}-backups"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:robosystems/${Environment}-*"
                  - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:robosystems/${Environment}/*"
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource:
                  - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/secretsmanager"
                  - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ebs"
                  - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"
                Condition:
                  StringEquals:
                    "kms:ViaService":
                      - !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
                      - !Sub "ec2.${AWS::Region}.amazonaws.com"
                      - !Sub "ssm.${AWS::Region}.amazonaws.com"
              - Effect: Allow
                Action:
                  - autoscaling:SetInstanceHealth
                  - autoscaling:UpdateAutoScalingGroup
                  - autoscaling:DescribeAutoScalingGroups
                  - autoscaling:SetDesiredCapacity
                  - autoscaling:SetInstanceProtection
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - !Ref VolumeManagerFunctionArn
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::robosystems-${Environment}-deployment/*"
                  - !Sub "arn:${AWS::Partition}:s3:::robosystems-${Environment}-deployment"
              - Effect: Allow
                Action:
                  - ec2:CreateSnapshot
                  - ec2:CreateTags
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:DescribeVolumeStatus
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                  - ec2:AttachVolume
                  - ec2:DetachVolume
                  - ec2:ModifyVolume
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: "*"
              - Effect: Allow
                Action:
                  - aps:RemoteWrite
                  - aps:QueryMetrics
                  - aps:GetLabels
                  - aps:GetSeries
                  - aps:GetMetricMetadata
                Resource: !Sub "arn:${AWS::Partition}:aps:${AWS::Region}:${AWS::AccountId}:workspace/*"
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: CreatedBy
          Value: CloudFormation

  WriterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-writer-profile"
      Roles:
        - !Ref WriterInstanceRole

  # ========================================
  # COMPUTE RESOURCES
  # ========================================

  WriterLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-writer-template"
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt WriterInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref WriterSecurityGroup
          - !Ref ValkeyClientSecurityGroupId
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              Encrypted: true
              DeleteOnTermination: true
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "robosystems-${WriterTier}-${Environment}"
              - Key: Environment
                Value: !Ref Environment
              - Key: GraphBackend
                Value: neo4j
              - Key: GraphRole
                Value: writer
              - Key: WriterTier
                Value: !Ref WriterTier
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              set -e

              # Set environment variables
              echo "Setting environment variables..."

              # Get instance metadata with IMDSv2
              TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
              INSTANCE_ID=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
              PRIVATE_IP=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/local-ipv4)
              AZ=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/availability-zone)

              cat >> /etc/environment << EOF
              ENVIRONMENT=${Environment}
              GRAPH_BACKEND=neo4j
              GRAPH_ROLE=writer
              WRITER_TIER=${WriterTier}
              CLUSTER_TIER=${WriterTier}
              NEO4J_VERSION=${Neo4jVersion}
              NEO4J_BOLT_PORT=7687
              NEO4J_HTTP_PORT=7474
              GRAPH_API_PORT=8001
              NEO4J_DATABASE_PATH=/data/neo4j
              AWS_DEFAULT_REGION=${AWS::Region}
              AWS_STACK_NAME=${AWS::StackName}
              INSTANCE_ID=$INSTANCE_ID
              PRIVATE_IP=$PRIVATE_IP
              EOF

              # Ensure cfn-signal will run even if setup has issues
              trap '/opt/aws/bin/cfn-signal -e 1 --stack ${AWS::StackName} --resource WriterAutoScalingGroup --region ${AWS::Region}' ERR

              # Export critical environment variables
              export INSTANCE_REGISTRY_TABLE="robosystems-graph-${Environment}-instance-registry"
              export ALLOCATION_TABLE="robosystems-graph-${Environment}-graph-registry"
              export CLUSTER_TIER="${WriterTier}"
              export GRAPH_BACKEND="neo4j"
              export GRAPH_NODE_TYPE="writer"

              # Determine Neo4j edition based on tier
              if [ "${WriterTier}" = "neo4j-enterprise-xlarge" ]; then
                NEO4J_EDITION="enterprise"
              else
                NEO4J_EDITION="community"
              fi

              # Register instance in DynamoDB with backend_type and neo4j_edition
              echo "Registering Neo4j instance in DynamoDB with backend_type: neo4j, edition: $NEO4J_EDITION..."
              aws dynamodb put-item \
                --table-name "$INSTANCE_REGISTRY_TABLE" \
                --item "{
                  \"instance_id\": {\"S\": \"$INSTANCE_ID\"},
                  \"cluster_tier\": {\"S\": \"${WriterTier}\"},
                  \"backend_type\": {\"S\": \"neo4j\"},
                  \"neo4j_edition\": {\"S\": \"$NEO4J_EDITION\"},
                  \"private_ip\": {\"S\": \"$PRIVATE_IP\"},
                  \"stack_name\": {\"S\": \"${AWS::StackName}\"},
                  \"node_type\": {\"S\": \"writer\"},
                  \"status\": {\"S\": \"initializing\"},
                  \"database_count\": {\"N\": \"0\"},
                  \"max_databases\": {\"N\": \"1\"},
                  \"created_at\": {\"S\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}
                }" \
                --region ${AWS::Region}

              if [ $? -eq 0 ]; then
                echo "Successfully registered Neo4j instance in DynamoDB"
              else
                echo "WARNING: Failed to register instance in DynamoDB"
              fi

              # Download and execute Neo4j setup script
              aws s3 cp s3://robosystems-${Environment}-deployment/userdata/neo4j-writer.sh /tmp/neo4j-setup.sh || {
                echo "ERROR: Failed to download Neo4j setup script from S3"
                exit 1
              }
              chmod +x /tmp/neo4j-setup.sh

              # Retrieve Neo4j password from Secrets Manager
              NEO4J_PASSWORD=$(aws secretsmanager get-secret-value \
                --secret-id "robosystems/${Environment}/neo4j/${WriterTier}" \
                --query SecretString \
                --output text \
                --region ${AWS::Region} | jq -r '.NEO4J_PASSWORD')

              if [ -z "$NEO4J_PASSWORD" ] || [ "$NEO4J_PASSWORD" = "null" ]; then
                echo "ERROR: Failed to retrieve Neo4j password from Secrets Manager"
                exit 1
              fi

              # Retrieve Neo4j Enterprise license key for Enterprise XLarge tier
              if [ "${WriterTier}" = "neo4j-enterprise-xlarge" ]; then
                echo "Retrieving Neo4j Enterprise license key for Enterprise XLarge tier..."
                NEO4J_LICENSE_KEY=$(aws secretsmanager get-secret-value \
                  --secret-id "robosystems/${Environment}/neo4j/${WriterTier}/license" \
                  --query SecretString \
                  --output text \
                  --region ${AWS::Region} 2>/dev/null | jq -r '.NEO4J_LICENSE_KEY' || echo "")

                if [ -n "$NEO4J_LICENSE_KEY" ] && [ "$NEO4J_LICENSE_KEY" != "null" ]; then
                  export NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
                  export NEO4J_LICENSE_KEY="$NEO4J_LICENSE_KEY"
                  echo "Neo4j Enterprise license key retrieved successfully"
                else
                  echo "WARNING: No license key found for Premium tier - Neo4j will run in evaluation mode"
                fi
              fi

              # Export required environment variables for the setup script
              export ENVIRONMENT="${Environment}"
              export INSTANCE_TYPE=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-type)
              export NEO4J_VERSION="${Neo4jVersion}"
              export NEO4J_AUTH="neo4j/$NEO4J_PASSWORD"
              export WRITER_TIER="${WriterTier}"
              # Determine Neo4j edition for CloudWatch namespace
              if [ "${WriterTier}" = "neo4j-enterprise-xlarge" ]; then
                export CloudWatchNamespace="RoboSystemsGraph/${EnvironmentCapitalized}/Neo4jEnterprise"
              else
                export CloudWatchNamespace="RoboSystemsGraph/${EnvironmentCapitalized}/Neo4jCommunity"
              fi
              export AWS_REGION="${AWS::Region}"
              export AWS_DEFAULT_REGION="${AWS::Region}"
              export GRAPH_NODE_TYPE="writer"

              # Execute setup script with error handling
              set +e
              bash /tmp/neo4j-setup.sh
              SETUP_EXIT_CODE=$?

              if [ $SETUP_EXIT_CODE -eq 0 ]; then
                echo "Neo4j setup script completed successfully"
              else
                echo "ERROR: Neo4j setup script failed with exit code $SETUP_EXIT_CODE"
              fi

              # Signal CloudFormation (always runs)
              /opt/aws/bin/cfn-signal -e $SETUP_EXIT_CODE \
                --stack ${AWS::StackName} \
                --resource WriterAutoScalingGroup \
                --region ${AWS::Region}

              set -e
            - EnvironmentCapitalized:
                !FindInMap [EnvironmentMap, !Ref Environment, Capitalized]

  # ========================================
  # AUTO SCALING
  # ========================================

  WriterAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-writers-asg"
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      NewInstancesProtectedFromScaleIn: true
      HealthCheckType: EC2
      HealthCheckGracePeriod: 400  # Neo4j needs more time to start than Kuzu (300s) but less than 10 minutes
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchTemplate:
        LaunchTemplateId: !Ref WriterLaunchTemplate
        Version: !GetAtt WriterLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub "robosystems-${WriterTier}-${Environment}"
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
    CreationPolicy: !If
      - HasMinInstances
      - ResourceSignal:
          Count: !Ref MinInstances
          Timeout: PT15M  # Neo4j needs more time than Kuzu (15 min vs 5 min)
      - !Ref AWS::NoValue
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT7M  # Moderate pause for Neo4j startup (Kuzu uses 5 min)
        WaitOnResourceSignals: true
        SuspendProcesses:
          - AlarmNotification
          - AZRebalance
          - ScheduledActions

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DeletionPolicy: Delete
    Properties:
      AutoScalingGroupName: !Ref WriterAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0

  # ========================================
  # LIFECYCLE HOOKS
  # ========================================

  TerminationLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref WriterAutoScalingGroup
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 600  # More time for Neo4j graceful shutdown
      NotificationTargetARN: !Ref VolumeDetachmentTopicArn
      RoleARN: !GetAtt LifecycleHookRole.Arn

  LifecycleHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LifecycleHookPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref VolumeDetachmentTopicArn

  # ========================================
  # MONITORING & ALARMS
  # ========================================

  HighCPUAlarm:
    Type: AWS::CloudWatch::Alarm
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AlarmName: !Sub "robosystems-neo4j-${WriterTier}-${Environment}-high-cpu"
      AlarmDescription: Triggers when CPU exceeds 80% for 5 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WriterAutoScalingGroup
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref Neo4jAlertTopic

  HighMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AlarmName: !Sub "robosystems-neo4j-${WriterTier}-${Environment}-high-memory"
      AlarmDescription: Triggers when memory usage exceeds 85% for 5 minutes
      MetricName: mem_used_percent
      Namespace: !If
        - IsPremiumTier
        - !Sub
          - "RoboSystemsGraph/${EnvCapitalized}/Neo4jEnterprise"
          - EnvCapitalized:
              !FindInMap [EnvironmentMap, !Ref Environment, Capitalized]
        - !Sub
          - "RoboSystemsGraph/${EnvCapitalized}/Neo4jCommunity"
          - EnvCapitalized:
              !FindInMap [EnvironmentMap, !Ref Environment, Capitalized]
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 85
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WriterAutoScalingGroup
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref Neo4jAlertTopic

  AllocationFailureAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "robosystems-neo4j-${WriterTier}-${Environment}-allocation-failures"
      AlarmDescription: "Alert when database allocations fail"
      MetricName: AllocationFailures
      Namespace: !If
        - IsPremiumTier
        - !Sub
          - "RoboSystemsGraph/${EnvCapitalized}/Neo4jEnterprise"
          - EnvCapitalized:
              !FindInMap [EnvironmentMap, !Ref Environment, Capitalized]
        - !Sub
          - "RoboSystemsGraph/${EnvCapitalized}/Neo4jCommunity"
          - EnvCapitalized:
              !FindInMap [EnvironmentMap, !Ref Environment, Capitalized]
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref Neo4jAlertTopic

Outputs:
  WriterAutoScalingGroupName:
    Description: Name of the writer Auto Scaling Group
    Value: !Ref WriterAutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-asg-name"

  WriterSecurityGroupId:
    Description: Security group ID for writers
    Value: !Ref WriterSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-sg-id"

  Neo4jBoltEndpoint:
    Description: Neo4j Bolt protocol endpoint (internal VPC access)
    Value: !Sub "${AWS::StackName}:7687"
    Export:
      Name: !Sub "${AWS::StackName}-bolt-endpoint"
