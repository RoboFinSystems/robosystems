Description: RoboSystems Kuzu Shared Repository Replicas - Read-only replicas with ALB/ASG for shared repositories

Parameters:
  # Environment
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - staging
    Description: Environment name (prod or staging)
    ConstraintDescription: Must be prod or staging

  # Infrastructure & Networking
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where instances will be deployed
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: Must be a valid CIDR block
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Private subnet IDs for EC2 instances

  # Instance Configuration
  AmiId:
    Type: AWS::EC2::Image::Id
    Description: Amazon Linux 2023 ARM64 AMI ID
    ConstraintDescription: Must be a valid AMI ID

  InstanceType:
    Type: String
    Default: r7g.large
    AllowedValues:
      - r7g.medium
      - r7g.large
      - r7g.xlarge
      - r7g.2xlarge
    Description: EC2 instance type for replicas (memory-optimized for Kuzu operations)
    ConstraintDescription: Must be a valid Graviton memory-optimized instance type

  # Auto-scaling Configuration
  MinInstances:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 100
    Description: Minimum number of replica instances when enabled
    ConstraintDescription: Must be at least 1
  MaxInstances:
    Type: Number
    Default: 10
    MinValue: 1
    MaxValue: 100
    Description: Maximum number of replica instances
    ConstraintDescription: Must be at least 1
  DesiredInstances:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 100
    Description: Desired number of replica instances when enabled
    ConstraintDescription: Must be at least 1
  EnableWarmPool:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Enable warm pool for faster replica scaling
    ConstraintDescription: Must be true or false

  # Storage Configuration
  VolumeIops:
    Type: Number
    Default: 3000
    Description: IOPS for replica data volumes (3000 is baseline, replicas are read-only from snapshots)
    MinValue: 3000
    MaxValue: 16000
    ConstraintDescription: Must be between 3000 and 16000

  # Kuzu Configuration
  SharedRepositories:
    Type: CommaDelimitedList
    Default: "sec,industry,economic"
    Description: List of shared repositories to host on this infrastructure
    ConstraintDescription: Must be a comma-separated list of repository names

  # Docker Configuration
  ECRImageTag:
    Type: String
    Description: Docker image tag for Kuzu containers
    Default: latest

  # Lambda Configuration
  VolumeManagerFunctionArn:
    Type: String
    Description: ARN of the Volume Manager Lambda function
    AllowedPattern: ^arn:aws:lambda:[a-z0-9-]+:[0-9]+:function:.*$
    ConstraintDescription: Must be a valid Lambda function ARN

  # Monitoring
  SNSAlertEmail:
    Type: String
    Description: Email address for database alerts
    AllowedPattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
    ConstraintDescription: Must be a valid email address

  # Tagging Configuration
  ServiceTag:
    Type: String
    Default: RoboSystems
    Description: Service tag for resource identification and billing
  ComponentTag:
    Type: String
    Default: KuzuSharedWriters
    Description: Component tag for resource identification and billing

Conditions:
  HasWarmPool: !Equals [!Ref EnableWarmPool, "true"]

Mappings:
  # Environment name capitalization mapping
  EnvironmentMap:
    staging:
      Capitalized: Staging
    prod:
      Capitalized: Prod

Resources:
  # ========================================
  # SNS TOPICS
  # ========================================

  # SNS Topic for database alerts
  ReplicasAlertTopic:
    Type: AWS::SNS::Topic
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TopicName: !Sub "robosystems-kuzu-shared-replicas-${Environment}-alerts"
      DisplayName: !Sub "RoboSystems Kuzu Shared Replicas ${Environment} Alerts"
      Subscription:
        - Endpoint: !Ref SNSAlertEmail
          Protocol: email
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: CreatedBy
          Value: CloudFormation

  # ========================================
  # SHARED RESOURCES (Always Created)
  # ========================================

  # Security Group (shared by master and replicas)
  SharedWriterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      GroupName: !Sub "${AWS::StackName}-shared-writers-sg"
      GroupDescription: Security group for Kuzu shared repository writers
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8002
          ToPort: 8002
          CidrIp: !Ref VpcCidr
          Description: Allow Kuzu API access from VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-shared-writers-sg"
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: CreatedBy
          Value: CloudFormation

  # IAM Role (shared by master and replicas)
  SharedWriterRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RoleName: !Sub "${AWS::StackName}-shared-writer-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore"
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy"
      Policies:
        - PolicyName: SharedWriterPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:${AWS::Partition}:s3:::${AWS::StackName}-shared-data/*"
                  - !Sub "arn:${AWS::Partition}:s3:::${AWS::StackName}-shared-data"
                  - !Sub "arn:${AWS::Partition}:s3:::robosystems-${Environment}-deployment/*"
                  - !Sub "arn:${AWS::Partition}:s3:::robosystems-${Environment}-deployment"
                  - !Sub "arn:${AWS::Partition}:s3:::robosystems-sec-processed-${Environment}/*"
                  - !Sub "arn:${AWS::Partition}:s3:::robosystems-sec-processed-${Environment}"
              - Effect: Allow
                Action:
                  - ec2:CreateSnapshot
                  - ec2:CreateTags
                  - ec2:DescribeSnapshots
                  - ec2:DescribeVolumes
                  - ec2:DescribeInstances
                  - ec2:DescribeTags
                Resource: "*"
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Ref VolumeManagerFunctionArn
              - Effect: Allow
                Action:
                  - aps:RemoteWrite
                  - aps:QueryMetrics
                  - aps:GetLabels
                  - aps:GetSeries
                  - aps:GetMetricMetadata
                Resource: !Sub "arn:${AWS::Partition}:aps:${AWS::Region}:${AWS::AccountId}:workspace/*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  # Wildcard access to all environment-specific secrets
                  # Base secret: robosystems/prod or robosystems/staging
                  - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:robosystems/${Environment}-*"
                  # Extension secrets: robosystems/prod/s3, robosystems/prod/postgres, robosystems/prod/kuzu, etc.
                  - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:robosystems/${Environment}/*"
              # KMS permissions for AWS managed keys with service conditions
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:DescribeKey
                Resource:
                  - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/secretsmanager"
                  - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ebs"
                  - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/ssm"
                Condition:
                  StringEquals:
                    "kms:ViaService":
                      - !Sub "secretsmanager.${AWS::Region}.amazonaws.com"
                      - !Sub "ec2.${AWS::Region}.amazonaws.com"
                      - !Sub "ssm.${AWS::Region}.amazonaws.com"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource:
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-kuzu-${Environment}-instance-registry"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-kuzu-${Environment}-graph-registry"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-kuzu-${Environment}-instance-registry/index/*"
                  - !Sub "arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/robosystems-kuzu-${Environment}-graph-registry/index/*"
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"

  SharedWriterInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      InstanceProfileName: !Sub "${AWS::StackName}-shared-writer-profile"
      Roles:
        - !Ref SharedWriterRole

  # ========================================
  # REPLICA INFRASTRUCTURE
  # ========================================

  # Replica Launch Template
  ReplicaLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-replica-template"
      LaunchTemplateData:
        ImageId: !Ref AmiId
        InstanceType: !Ref InstanceType
        IamInstanceProfile:
          Arn: !GetAtt SharedWriterInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref SharedWriterSecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 30
              VolumeType: gp3
              Encrypted: true
              DeleteOnTermination: true
          - DeviceName: /dev/xvdf
            Ebs:
              # Volume size is determined by the snapshot
              VolumeType: gp3
              Iops: !Ref VolumeIops
              Encrypted: true
              DeleteOnTermination: true
              # SnapshotId will be set by kuzu_snapshot_selector Lambda
              # The Lambda updates the launch template with latest snapshot
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "robosystems-kuzu-shared-replica-${Environment}"
              - Key: Environment
                Value: !Ref Environment
              - Key: KuzuRole
                Value: replica
              - Key: RepositoryTypes
                Value: !Join [",", !Ref SharedRepositories]
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: !Sub "robosystems-kuzu-shared-replica-${Environment}-data"
              - Key: Environment
                Value: !Ref Environment
              - Key: Service
                Value: !Ref ServiceTag
              - Key: Component
                Value: !Ref ComponentTag
              - Key: VolumeType
                Value: SharedKuzuData
              - Key: NodeType
                Value: shared_replica
              - Key: CreatedBy
                Value: CloudFormation
        UserData:
          Fn::Base64: !Sub
            - |
              #!/bin/bash
              set -e

              # Set environment variables
              echo "Setting environment variables..."
              INSTANCE_ID=$(ec2-metadata --instance-id | cut -d' ' -f2)
              PRIVATE_IP=$(ec2-metadata --local-ipv4 | cut -d' ' -f2)

              # Export critical environment variables for the setup script
              export AWS_ACCOUNT_ID="${AWS::AccountId}"
              export ECR_URI="${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/robosystems"
              export ECR_IMAGE_TAG="${ECRImageTag}"
              export INSTANCE_REGISTRY_TABLE="robosystems-kuzu-${Environment}-instance-registry"
              export KUZU_NODE_TYPE="shared_replica"
              export MAX_DATABASES_PER_NODE="10"
              export KUZU_MAX_DATABASES_PER_NODE="10"

              # Note: Secrets are fetched directly by the application using secrets_manager.py
              # No need to fetch secrets here in userdata

              cat >> /etc/environment << EOF
              ENVIRONMENT=${Environment}
              KUZU_ROLE=replica
              KUZU_NODE_TYPE=shared_replica
              SHARED_REPOSITORIES=${SharedRepositoriesJoined}
              KUZU_PORT=8002
              KUZU_ACCESS_PATTERN=api_writer
              KUZU_DATABASE_PATH=/data/kuzu-dbs
              KUZU_HTTP_TIMEOUT=30
              KUZU_QUERY_TIMEOUT=30
              KUZU_MAX_DATABASES_PER_NODE=10
              AWS_DEFAULT_REGION=${AWS::Region}
              AWS_STACK_NAME=${AWS::StackName}
              INSTANCE_ID=$INSTANCE_ID
              EOF

              # Wait for data volume to be attached
              echo "Waiting for data volume..."
              while [ ! -e /dev/xvdf ]; do
                sleep 5
                echo "Still waiting for /dev/xvdf..."
              done

              # Check if volume already has a filesystem (from snapshot)
              echo "Checking volume filesystem..."
              if file -s /dev/xvdf | grep -q "XFS filesystem"; then
                echo "Volume has existing XFS filesystem (likely from snapshot)"
              else
                echo "Volume is empty, creating XFS filesystem..."
                mkfs.xfs /dev/xvdf
              fi

              # Mount data volume
              mkdir -p /data
              mount /dev/xvdf /data
              echo "/dev/xvdf /data xfs defaults,nofail 0 2" >> /etc/fstab

              # Verify database content
              if [ -d "/data/kuzu-dbs" ] && [ "$(ls -A /data/kuzu-dbs 2>/dev/null)" ]; then
                echo "Database directory exists with content - using snapshot data"
                echo "Found databases:"
                ls -la /data/kuzu-dbs/
              else
                echo "Database directory is empty - creating structure"
                mkdir -p /data/kuzu-dbs
                chmod 755 /data/kuzu-dbs
                echo "WARNING: No snapshot data found. Replica starting with empty database."
                echo "This should only happen before the first snapshot is created."
              fi

              # Download and execute setup script
              aws s3 cp s3://robosystems-${Environment}-deployment/userdata/kuzu-writer.sh /tmp/kuzu-setup.sh || {
                echo "ERROR: Failed to download setup script from S3"
                exit 1
              }
              chmod +x /tmp/kuzu-setup.sh

              # Export required environment variables for the setup script
              export ENVIRONMENT="${Environment}"
              export KUZU_NODE_TYPE="shared_replica"
              export SHARED_REPOSITORIES="${SharedRepositoriesJoined}"
              export INSTANCE_TYPE=$(ec2-metadata --instance-type | cut -d " " -f 2)
              export KUZU_PORT="8002"
              export AWS_ACCOUNT_ID="${AWS::AccountId}"
              export ECR_URI="${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/robosystems"
              export ECR_IMAGE_TAG="${ECRImageTag}"
              # Set CloudWatch namespace with environment suffix
              export CloudWatchNamespace="RoboSystemsKuzu/${EnvironmentCapitalized}"

              # Additional required variables
              export AWS_REGION="${AWS::Region}"
              export AWS_DEFAULT_REGION="${AWS::Region}"
              export WRITER_TIER="shared"
              export MAX_DATABASES_PER_NODE="10"
              export REPOSITORY_TYPE="shared"

              # Set KUZU_API_URL to the ALB endpoint for shared replicas
              export KUZU_API_URL="http://${ReplicaLoadBalancerDNS}"

              # Execute setup script with error handling
              SETUP_EXIT_CODE=0
              if bash /tmp/kuzu-setup.sh; then
                echo "Setup script completed successfully"
              else
                SETUP_EXIT_CODE=$?
                echo "ERROR: Setup script failed with exit code $SETUP_EXIT_CODE"
                # Continue anyway to ensure cfn-signal is called
              fi

              echo "Replica instance setup complete"
              echo "Ready to serve read traffic via ALB"

              # Signal CloudFormation with the setup script exit code
              /opt/aws/bin/cfn-signal -e $SETUP_EXIT_CODE \
                --stack ${AWS::StackName} \
                --resource ReplicaAutoScalingGroup \
                --region ${AWS::Region}
            - SharedRepositoriesJoined: !Join [",", !Ref SharedRepositories]
              EnvironmentCapitalized:
                !FindInMap [EnvironmentMap, !Ref Environment, Capitalized]
              ReplicaLoadBalancerDNS: !GetAtt ReplicaLoadBalancer.DNSName

  # Replica Auto Scaling Group
  ReplicaAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: ReplicaLoadBalancer # Ensure ALB exists first
    CreationPolicy:
      ResourceSignal:
        Count: !Ref MinInstances
        Timeout: PT15M # 15 minutes to allow for snapshot restoration
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      AutoScalingGroupName: !Sub "${AWS::StackName}-replicas-asg"
      MinSize: !Ref MinInstances
      MaxSize: !Ref MaxInstances
      DesiredCapacity: !Ref DesiredInstances
      HealthCheckType: EC2
      HealthCheckGracePeriod: 300
      VPCZoneIdentifier: !Ref SubnetIds
      TargetGroupARNs:
        - !Ref ReplicaTargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref ReplicaLaunchTemplate
        Version: !GetAtt ReplicaLaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: !Sub "kuzu-shared-replica-${Environment}"
          PropagateAtLaunch: true
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref MinInstances
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true

  # Warm Pool for Replicas
  ReplicaWarmPool:
    Type: AWS::AutoScaling::WarmPool
    Condition: HasWarmPool
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AutoScalingGroupName: !Ref ReplicaAutoScalingGroup
      MinSize: 1
      MaxGroupPreparedCapacity: 2
      PoolState: Stopped
      InstanceReusePolicy:
        ReuseOnScaleIn: true

  # Application Load Balancer for Replicas
  ReplicaLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      Name: !Sub "shared-replicas-${Environment}" # Shortened for 32-char limit
      Type: application
      Scheme: internal
      SecurityGroups:
        - !Ref SharedWriterSecurityGroup
      Subnets: !Ref SubnetIds
      Tags:
        - Key: Name
          Value: "kuzu-shared-replicas-alb"
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: RepositoryTypes
          Value: "shared-repositories"
        - Key: CreatedBy
          Value: CloudFormation

  ReplicaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Name: "shared-replicas-tg" # Shortened
      Port: 8002
      Protocol: HTTP
      VpcId: !Ref VpcId
      HealthCheckEnabled: true
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "60"
      Tags:
        - Key: Name
          Value: "kuzu-shared-replicas-tg"
        - Key: Environment
          Value: !Ref Environment
        - Key: Service
          Value: !Ref ServiceTag
        - Key: Component
          Value: !Ref ComponentTag
        - Key: RepositoryTypes
          Value: "shared-repositories"
        - Key: CreatedBy
          Value: CloudFormation

  ReplicaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LoadBalancerArn: !Ref ReplicaLoadBalancer
      Port: 8002
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ReplicaTargetGroup

  # Scaling Policies for Replicas
  ReplicaScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AutoScalingGroupName: !Ref ReplicaAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: 70.0

  # ========================================
  # MONITORING AND ALARMS
  # ========================================

  # Replica Unhealthy Alarm
  ReplicaUnhealthyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "robosystems-kuzu-shared-replicas-${Environment}-unhealthy"
      AlarmDescription: "Alert when replica instances fail health checks"
      MetricName: UnHealthyHostCount
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt ReplicaTargetGroup.TargetGroupFullName
        - Name: LoadBalancer
          Value: !GetAtt ReplicaLoadBalancer.LoadBalancerFullName
      Statistic: Average
      Period: 60
      EvaluationPeriods: 2
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref ReplicasAlertTopic

  # Replica Response Time Alarm
  ReplicaResponseTimeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "robosystems-kuzu-shared-replicas-${Environment}-high-response-time"
      AlarmDescription: "Alert when replica response time is high"
      MetricName: TargetResponseTime
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ReplicaLoadBalancer.LoadBalancerFullName
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5.0
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref ReplicasAlertTopic

  # Replica Request Count Alarm (Low Traffic)
  ReplicaLowTrafficAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "robosystems-kuzu-shared-replicas-${Environment}-low-traffic"
      AlarmDescription: "Alert when replica traffic is unusually low"
      MetricName: RequestCount
      Namespace: AWS/ApplicationELB
      Dimensions:
        - Name: LoadBalancer
          Value: !GetAtt ReplicaLoadBalancer.LoadBalancerFullName
      Statistic: Sum
      Period: 3600
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching
      AlarmActions:
        - !Ref ReplicasAlertTopic

  # Replica ASG Size Alarm
  ReplicaASGSizeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "robosystems-kuzu-shared-replicas-${Environment}-asg-below-minimum"
      AlarmDescription: "Alert when replica ASG has fewer instances than minimum"
      MetricName: GroupInServiceInstances
      Namespace: AWS/AutoScaling
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ReplicaAutoScalingGroup
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref MinInstances
      ComparisonOperator: LessThanThreshold
      TreatMissingData: breaching
      AlarmActions:
        - !Ref ReplicasAlertTopic

  # ========================================
  # DATA LIFECYCLE MANAGEMENT
  # ========================================

  # Note: When using Volume Manager, all snapshot operations are handled by the Volume Manager stack.
  # The shared writers no longer need their own snapshot Lambda functions or EventBridge rules.
  # Volume Manager automatically:
  # - Creates daily snapshots of shared volumes
  # - Manages snapshot retention
  # - Updates replica launch templates
  # - Handles snapshot cleanup

Outputs:
  ReplicaLoadBalancerEndpoint:
    Description: Replica load balancer endpoint (for all read traffic)
    Value: !Sub "http://${ReplicaLoadBalancer.DNSName}:8002"
    Export:
      Name: !Sub "${AWS::StackName}-replicas-endpoint"

  ReplicaLoadBalancerDNS:
    Description: Replica load balancer DNS name
    Value: !GetAtt ReplicaLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-replicas-dns"

  DatabasePath:
    Description: Unified database path
    Value: "/data/kuzu-dbs"
    Export:
      Name: !Sub "${AWS::StackName}-database-path"

  ReplicaInfrastructureStatus:
    Description: Replica infrastructure status (always enabled for this stack)
    Value: "ENABLED"
    Export:
      Name: !Sub "${AWS::StackName}-replicas-status"

  SecurityGroupId:
    Description: Security group ID for Kuzu shared writers
    Value: !Ref SharedWriterSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-security-group-id"

  InstanceRoleArn:
    Description: IAM role ARN for Kuzu shared writer instances
    Value: !GetAtt SharedWriterRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-instance-role-arn"
