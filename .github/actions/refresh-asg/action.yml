name: "Refresh AutoScaling Group Instances"
description: "Refreshes instances in an AutoScaling Group"

inputs:
  stack-name:
    description: "Name of the CloudFormation stack containing the AutoScaling Group"
    required: true
  skip-autoscale-refresh:
    description: "Whether to skip the instance refresh"
    required: false
    default: "false"
  logical-resource-id:
    description: "Logical resource ID of the AutoScaling Group in the stack"
    required: false
    default: "AutoScalingGroupName"
  min-healthy-percentage:
    description: "Minimum percentage of instances to keep healthy during refresh"
    required: false
    default: "50"
  instance-warmup:
    description: "Time to wait for new instances to warm up (in seconds)"
    required: false
    default: "120"
  max-wait-time:
    description: "Maximum time to wait for refresh completion (in seconds)"
    required: false
    default: "3600"
  strategy:
    description: "Instance refresh strategy (Rolling)"
    required: false
    default: "Rolling"

runs:
  using: "composite"
  steps:
    - name: Refresh Autoscaling Group Instances
      if: inputs.skip-autoscale-refresh != 'true'
      shell: bash
      run: |
        set -euo pipefail

        echo "Getting AutoScaling Group name from CloudFormation..."

        # First try to get the ASG name from stack outputs
        ASG_NAME=$(aws cloudformation describe-stacks \
          --stack-name ${{ inputs.stack-name }} \
          --query "Stacks[0].Outputs[?OutputKey=='${{ inputs.logical-resource-id }}'].OutputValue" \
          --output text 2>/dev/null || true)

        # If not found in outputs, try alternative output keys
        if [ -z "$ASG_NAME" ] || [ "$ASG_NAME" == "None" ]; then
          echo "Could not find ${{ inputs.logical-resource-id }} in stack outputs, trying alternative keys..."
          
          for OUTPUT_KEY in "AutoScalingGroupName" "GHARunnerAutoScalingGroupName" "AutoScalingGroup" "ASGName" "WorkerASG" "ASG"; do
            ASG_NAME=$(aws cloudformation describe-stacks \
              --stack-name ${{ inputs.stack-name }} \
              --query "Stacks[0].Outputs[?OutputKey=='${OUTPUT_KEY}'].OutputValue" \
              --output text 2>/dev/null || true)
            
            if [ -n "$ASG_NAME" ] && [ "$ASG_NAME" != "None" ]; then
              echo "Found ASG name using output key: $OUTPUT_KEY"
              break
            fi
          done
        fi

        # If still not found, try to get it from the stack resources
        if [ -z "$ASG_NAME" ] || [ "$ASG_NAME" == "None" ]; then
          echo "Could not find ASG in outputs, checking stack resources..."
          
          # Common logical resource IDs for ASGs
          for LOGICAL_ID in "GHARunnerAutoScalingGroup" "WorkerAutoScalingGroup" "AutoScalingGroup" "ASG" "WorkerASG"; do
            ASG_NAME=$(aws cloudformation describe-stack-resource \
              --stack-name ${{ inputs.stack-name }} \
              --logical-resource-id "${LOGICAL_ID}" \
              --query "StackResourceDetail.PhysicalResourceId" \
              --output text 2>/dev/null || true)
            
            if [ -n "$ASG_NAME" ] && [ "$ASG_NAME" != "None" ]; then
              echo "Found ASG using logical resource ID: $LOGICAL_ID"
              break
            fi
          done
        fi

        # If still not found, try listing all resources and finding ASG by type
        if [ -z "$ASG_NAME" ] || [ "$ASG_NAME" == "None" ]; then
          echo "Could not find ASG by logical ID, searching by resource type..."
          
          ASG_NAME=$(aws cloudformation list-stack-resources \
            --stack-name ${{ inputs.stack-name }} \
            --query "StackResourceSummaries[?ResourceType=='AWS::AutoScaling::AutoScalingGroup'].PhysicalResourceId | [0]" \
            --output text 2>/dev/null || true)
          
          if [ -n "$ASG_NAME" ] && [ "$ASG_NAME" != "None" ]; then
            echo "Found ASG by resource type search"
          fi
        fi

        if [ -z "$ASG_NAME" ] || [ "$ASG_NAME" == "None" ]; then
          echo "Error: Could not determine AutoScaling Group name from stack: ${{ inputs.stack-name }}"
          echo "Attempted to find using outputs, logical IDs, and resource type"
          exit 1
        fi

        echo "Found AutoScaling Group: $ASG_NAME"

        # Check if an instance refresh is already in progress
        echo "Checking for existing instance refresh..."
        EXISTING_REFRESH=$(aws autoscaling describe-instance-refreshes \
          --auto-scaling-group-name "$ASG_NAME" \
          --max-records 1 \
          --query "InstanceRefreshes[?Status=='InProgress' || Status=='Pending' || Status=='Cancelling'] | [0]" \
          --output json)

        if [ "$EXISTING_REFRESH" != "null" ] && [ -n "$EXISTING_REFRESH" ]; then
          REFRESH_STATUS=$(echo "$EXISTING_REFRESH" | jq -r '.Status')
          REFRESH_ID=$(echo "$EXISTING_REFRESH" | jq -r '.InstanceRefreshId')
          
          echo "Found existing refresh with status: $REFRESH_STATUS (ID: $REFRESH_ID)"
          
          if [ "$REFRESH_STATUS" == "InProgress" ] || [ "$REFRESH_STATUS" == "Pending" ]; then
            echo "Cancelling the existing refresh before starting a new one..."
            
            if aws autoscaling cancel-instance-refresh --auto-scaling-group-name "$ASG_NAME"; then
              echo "Cancellation requested. Waiting for it to complete..."
              
              # Wait for cancellation to complete
              CANCEL_WAIT=0
              while [ $CANCEL_WAIT -lt 120 ]; do
                CANCEL_STATUS=$(aws autoscaling describe-instance-refreshes \
                  --auto-scaling-group-name "$ASG_NAME" \
                  --instance-refresh-ids "$REFRESH_ID" \
                  --query "InstanceRefreshes[0].Status" \
                  --output text)
                
                if [ "$CANCEL_STATUS" == "Cancelled" ] || [ "$CANCEL_STATUS" == "Failed" ]; then
                  echo "Cancellation completed with status: $CANCEL_STATUS"
                  break
                fi
                
                echo "Waiting for cancellation... Current status: $CANCEL_STATUS"
                sleep 10
                CANCEL_WAIT=$((CANCEL_WAIT + 10))
              done
            else
              echo "Warning: Failed to cancel existing refresh, proceeding anyway"
            fi
          fi
        fi

        # Get current ASG configuration
        echo "Retrieving current ASG configuration..."
        ASG_CONFIG=$(aws autoscaling describe-auto-scaling-groups \
          --auto-scaling-group-names "$ASG_NAME" \
          --query "AutoScalingGroups[0]" \
          --output json)

        CURRENT_DESIRED=$(echo "$ASG_CONFIG" | jq -r '.DesiredCapacity')
        CURRENT_MIN=$(echo "$ASG_CONFIG" | jq -r '.MinSize')
        CURRENT_MAX=$(echo "$ASG_CONFIG" | jq -r '.MaxSize')
        HEALTH_CHECK_TYPE=$(echo "$ASG_CONFIG" | jq -r '.HealthCheckType')
        HEALTH_CHECK_GRACE=$(echo "$ASG_CONFIG" | jq -r '.HealthCheckGracePeriod')

        echo "Current ASG configuration:"
        echo "  Desired Capacity: $CURRENT_DESIRED"
        echo "  Min Size: $CURRENT_MIN"
        echo "  Max Size: $CURRENT_MAX"
        echo "  Health Check Type: $HEALTH_CHECK_TYPE"
        echo "  Health Check Grace Period: $HEALTH_CHECK_GRACE"

        # Start instance refresh with enhanced configuration
        echo "Starting instance refresh for AutoScaling Group: $ASG_NAME"
        echo "Configuration:"
        echo "  Strategy: ${{ inputs.strategy }}"
        echo "  Min Healthy Percentage: ${{ inputs.min-healthy-percentage }}%"
        echo "  Instance Warmup: ${{ inputs.instance-warmup }} seconds"

        # Build preferences JSON
        PREFERENCES=$(cat <<EOF
        {
          "MinHealthyPercentage": ${{ inputs.min-healthy-percentage }},
          "InstanceWarmup": ${{ inputs.instance-warmup }},
          "CheckpointPercentages": [25, 50, 75],
          "CheckpointDelay": 30
        }
        EOF
        )

        # Start the refresh
        REFRESH_RESULT=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name "$ASG_NAME" \
          --strategy "${{ inputs.strategy }}" \
          --preferences "$PREFERENCES" \
          --output json)

        if [ $? -ne 0 ]; then
          echo "Error: Failed to start instance refresh"
          exit 1
        fi

        REFRESH_ID=$(echo "$REFRESH_RESULT" | jq -r '.InstanceRefreshId')
        echo "Instance refresh initiated with ID: $REFRESH_ID"

        # Monitor the refresh progress
        echo "Monitoring instance refresh progress..."
        START_TIME=$(date +%s)
        MAX_WAIT=${{ inputs.max-wait-time }}

        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED=$((CURRENT_TIME - START_TIME))
          
          if [ $ELAPSED -gt $MAX_WAIT ]; then
            echo "Error: Instance refresh timed out after ${MAX_WAIT} seconds"
            
            # Get final status
            FINAL_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name "$ASG_NAME" \
              --instance-refresh-ids "$REFRESH_ID" \
              --query "InstanceRefreshes[0]" \
              --output json)
            
            echo "Final refresh status:"
            echo "$FINAL_STATUS" | jq '.'
            
            exit 1
          fi
          
          # Get refresh status
          REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name "$ASG_NAME" \
            --instance-refresh-ids "$REFRESH_ID" \
            --query "InstanceRefreshes[0]" \
            --output json)
          
          STATUS=$(echo "$REFRESH_STATUS" | jq -r '.Status')
          PERCENTAGE=$(echo "$REFRESH_STATUS" | jq -r '.PercentageComplete // 0')
          INSTANCES_REPLACED=$(echo "$REFRESH_STATUS" | jq -r '.InstancesToUpdate // 0')
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Status: $STATUS | Progress: ${PERCENTAGE}% | Instances to replace: $INSTANCES_REPLACED"
          
          case "$STATUS" in
            "Successful")
              echo "Instance refresh completed successfully!"
              
              # Get completion details
              END_TIME=$(echo "$REFRESH_STATUS" | jq -r '.EndTime')
              START_TIME_STR=$(echo "$REFRESH_STATUS" | jq -r '.StartTime')
              
              echo "Refresh details:"
              echo "  Start Time: $START_TIME_STR"
              echo "  End Time: $END_TIME"
              echo "  Status Reason: $(echo "$REFRESH_STATUS" | jq -r '.StatusReason // "N/A"')"
              
              # Verify new instances are healthy
              echo "Verifying instance health..."
              UNHEALTHY_INSTANCES=$(aws autoscaling describe-auto-scaling-groups \
                --auto-scaling-group-names "$ASG_NAME" \
                --query "AutoScalingGroups[0].Instances[?HealthStatus!='Healthy'].InstanceId" \
                --output json)
              
              if [ "$UNHEALTHY_INSTANCES" != "[]" ]; then
                echo "Warning: Found unhealthy instances after refresh: $UNHEALTHY_INSTANCES"
              else
                echo "All instances are healthy"
              fi
              
              exit 0
              ;;
              
            "Failed")
              echo "Instance refresh failed!"
              echo "Status Reason: $(echo "$REFRESH_STATUS" | jq -r '.StatusReason')"
              exit 1
              ;;
              
            "Cancelled")
              echo "Instance refresh was cancelled!"
              exit 1
              ;;
              
            "Cancelling")
              echo "Instance refresh is being cancelled..."
              ;;
              
            "InProgress"|"Pending")
              # Continue monitoring
              ;;
              
            *)
              echo "Unknown status: $STATUS"
              ;;
          esac
          
          # Wait before next check
          sleep 30
        done
