name: 'Check Runner Availability'
description: 'Check if self-hosted GitHub Actions runners are available and set outputs for conditional runner selection'

inputs:
  runner_labels:
    description: 'Comma-separated list of required runner labels'
    required: false
    default: 'self-hosted,Linux,X64,AL2023,ci'
  timeout_minutes:
    description: 'Timeout for the check in minutes'
    required: false
    default: '2'
  github_token:
    description: 'GitHub token for API access'
    required: true

outputs:
  runners_available:
    description: 'Whether self-hosted runners are available (true/false)'
    value: ${{ steps.check-runners.outputs.runners_available }}
  runner_type:
    description: 'Recommended runner type (self-hosted or github-hosted)'
    value: ${{ steps.check-runners.outputs.runner_type }}
  runner_config:
    description: 'JSON array of runner configuration to use'
    value: ${{ steps.check-runners.outputs.runner_config }}

runs:
  using: 'composite'
  steps:
    - name: Check if self-hosted runners are available
      id: check-runners
      shell: bash
      run: |
        echo "üîç Checking if self-hosted GitHub Actions runners are available..."
        echo "Repository: ${{ github.repository }}"
        echo "Required labels: ${{ inputs.runner_labels }}"
        echo "Timeout: ${{ inputs.timeout_minutes }} minute(s)"
        echo ""
        
        # Convert comma-separated labels to array
        IFS=',' read -ra REQUIRED_LABELS <<< "${{ inputs.runner_labels }}"
        
        # Extract organization from repository name
        ORG_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f1)
        echo "üîç Checking organization: ${ORG_NAME}"
        
        # Get runner status from GitHub API (check organization-level runners)
        echo "üì° Calling GitHub API: https://api.github.com/orgs/${ORG_NAME}/actions/runners"
        RUNNERS_RESPONSE=$(curl -s -w "HTTP_CODE:%{http_code}" -H "Authorization: token ${{ inputs.github_token }}" \
          "https://api.github.com/orgs/${ORG_NAME}/actions/runners")
        
        # Extract HTTP status code
        HTTP_CODE=$(echo "$RUNNERS_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
        RUNNERS_RESPONSE=$(echo "$RUNNERS_RESPONSE" | sed 's/HTTP_CODE:[0-9]*$//')
        
        echo "üìä HTTP Status: ${HTTP_CODE}"
        echo "üìã API Response length: ${#RUNNERS_RESPONSE} characters"
        
        if [ "$HTTP_CODE" != "200" ]; then
          echo "‚ùå GitHub API returned status ${HTTP_CODE}"
          echo "Response: ${RUNNERS_RESPONSE}"
          echo "‚ùå Cannot verify runner availability - defaulting to GitHub-hosted runners"
          
          # Set outputs for GitHub-hosted fallback
          echo "runners_available=false" >> $GITHUB_OUTPUT
          echo "runner_type=github-hosted" >> $GITHUB_OUTPUT
          echo 'runner_config=["ubuntu-latest"]' >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Check if response is valid JSON
        if ! echo "$RUNNERS_RESPONSE" | jq . >/dev/null 2>&1; then
          echo "‚ùå Invalid JSON response from GitHub API"
          echo "Response: ${RUNNERS_RESPONSE}"
          echo "‚ùå Cannot parse runner data - defaulting to GitHub-hosted runners"
          
          # Set outputs for GitHub-hosted fallback
          echo "runners_available=false" >> $GITHUB_OUTPUT
          echo "runner_type=github-hosted" >> $GITHUB_OUTPUT
          echo 'runner_config=["ubuntu-latest"]' >> $GITHUB_OUTPUT
          exit 0
        fi
        
        # Show all available runners for debugging
        echo "üîç All available runners:"
        echo "$RUNNERS_RESPONSE" | jq -r '.runners[] | "  - \(.name): \(.status) (labels: \(.labels | map(.name) | join(", ")))"' || echo "No runners found or jq parsing failed"
        
        # Check if we have any online self-hosted runners with required labels
        echo "üéØ Looking for runners with labels: $(IFS=,; echo "${REQUIRED_LABELS[*]}")"
        MATCHING_RUNNERS=$(echo "$RUNNERS_RESPONSE" | jq -r --argjson required_labels "$(printf '%s\n' "${REQUIRED_LABELS[@]}" | jq -R . | jq -s .)" '
          .runners[] | 
          select(.status == "online") |
          select(.labels | map(.name) | sort as $runner_labels | 
                 $required_labels | all(. as $req | $runner_labels | index($req))) |
          .name
        ' 2>/dev/null || echo "")
        
        RUNNER_COUNT=$(echo "$MATCHING_RUNNERS" | grep -v '^$' | wc -l || echo "0")
        RUNNER_NAMES=$(echo "$MATCHING_RUNNERS" | grep -v '^$' | tr '\n' ',' | sed 's/,$//' || echo "")
        
        echo "‚úÖ Found $RUNNER_COUNT matching runners: $RUNNER_NAMES"
        
        if [ "$RUNNER_COUNT" -gt 0 ]; then
          echo "‚úÖ Found $RUNNER_COUNT online self-hosted runner(s) with required labels:"
          echo "$MATCHING_RUNNERS" | while IFS= read -r runner; do
            [ -n "$runner" ] && echo "  - $runner"
          done
          echo ""
          echo "‚úÖ Self-hosted runners are available and ready!"
          
          # Set outputs for available runners
          echo "runners_available=true" >> $GITHUB_OUTPUT
          echo "runner_type=self-hosted" >> $GITHUB_OUTPUT
          echo 'runner_config=["self-hosted", "Linux", "X64", "AL2023", "ci"]' >> $GITHUB_OUTPUT
          
          # Exit successfully with self-hosted configuration
          exit 0
        else
          echo "‚ùå No online self-hosted runners found with required labels"
          echo ""
          echo "üìã All available runners:"
          echo "$RUNNERS_RESPONSE" | jq -r '.runners[] | "  - \(.name): \(.status) (labels: \(.labels | map(.name) | join(", ")))"'
          echo ""
          echo "üîç Required labels: ${{ inputs.runner_labels }}"
          echo "üöÄ Runner deployment may still be in progress."
          echo ""
          echo "‚ö†Ô∏è No suitable self-hosted runners available - will recommend GitHub-hosted runners"
          
          # Set outputs for fallback to GitHub-hosted runners
          echo "runners_available=false" >> $GITHUB_OUTPUT
          echo "runner_type=github-hosted" >> $GITHUB_OUTPUT
          echo 'runner_config=["ubuntu-latest"]' >> $GITHUB_OUTPUT
          
          # Exit successfully with fallback configuration
          exit 0
        fi