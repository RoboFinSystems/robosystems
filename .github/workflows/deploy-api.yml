name: Deploy API

on:
  workflow_call:
    inputs:
      # Stack & Repository Configuration
      stack_name:
        description: "CloudFormation stack name"
        required: true
        type: string
      environment:
        description: "Environment to deploy to (prod, staging, or dev)"
        required: true
        type: string

      # GHA Runner Configuration
      runner_config:
        description: "GitHub Actions runner configuration (JSON array)"
        required: false
        type: string
        default: '["self-hosted", "Linux", "X64", "AL2023", "ci"]'

      # AWS Configuration
      aws_region:
        description: "AWS region for deployment"
        required: true
        type: string
      vpc_id:
        description: "VPC ID for ECS tasks"
        required: true
        type: string
      subnet_ids:
        description: "Private subnet IDs for ECS tasks (comma-separated)"
        required: true
        type: string
      public_subnet_ids:
        description: "Public subnet IDs for ALB (comma-separated)"
        required: true
        type: string

      # Container & Application Configuration
      ecr_repository_url:
        description: "Full ECR repository URL (e.g., 123456789.dkr.ecr.us-east-1.amazonaws.com/robosystems)"
        required: true
        type: string
      ecr_image_tag:
        description: "Docker image tag"
        required: true
        type: string

      # ECS & Compute Configuration
      desired_count:
        description: "Number of ECS tasks to run"
        required: true
        type: string
      cpu:
        description: "CPU units for ECS task (256 = 0.25 vCPU)"
        required: false
        type: string
        default: "512"
      memory:
        description: "Memory in MiB for ECS task"
        required: false
        type: string
        default: "1024"
      fargate_weight:
        description: "Weight for FARGATE capacity provider (On-Demand instances)"
        required: false
        type: string
        default: "20"
      fargate_spot_weight:
        description: "Weight for FARGATE_SPOT capacity provider (Spot instances)"
        required: false
        type: string
        default: "80"

      # Auto-scaling Configuration
      min_capacity:
        description: "Minimum number of tasks for auto scaling"
        required: false
        type: string
        default: "1"
      max_capacity:
        description: "Maximum number of tasks for auto scaling"
        required: false
        type: string
        default: "10"
      cpu_target_value:
        description: "Target CPU utilization percentage for auto scaling"
        required: false
        type: string
        default: "70"
      memory_target_value:
        description: "Target Memory utilization percentage for auto scaling"
        required: false
        type: string
        default: "60"

      # Domain & DNS Configuration
      domain_name:
        description: "Full domain name for the application (e.g., api.robosystems.ai)"
        required: true
        type: string
      domain_name_root:
        description: "Root domain name for Route 53 hosted zone"
        required: true
        type: string

      # JWT Configuration (Authentication)
      jwt_issuer:
        description: "JWT token issuer domain (without https:// prefix, defaults to domain_name if not provided)"
        required: false
        type: string
        default: ""
      jwt_audience:
        description: "JWT token audience domains (comma-separated, without https:// prefix)"
        required: false
        type: string
        default: ""


      # Cache Configuration
      valkey_url:
        description: "Valkey ElastiCache endpoint URL from Valkey stack"
        required: true
        type: string
      valkey_sg_id:
        description: "Security group ID for applications connecting to Valkey"
        required: true
        type: string

      # Other Configuration
      prometheus_stack_name:
        description: "Name of the Prometheus CloudFormation stack for this environment"
        required: false
        type: string
        default: ""
      refresh_ecs_service:
        description: "Refresh ECS service"
        required: false
        type: string
        default: "false"

      # WAF Configuration (optional)
      waf_enabled:
        description: "Enable WAF protection for the API"
        required: false
        type: string
        default: "false"
      waf_stack_name:
        description: "CloudFormation stack name for WAF"
        required: false
        type: string
        default: ""
      waf_rate_limit_per_ip:
        description: "Maximum requests per 5-minute window per IP"
        required: false
        type: string
        default: "10000"
      waf_enable_geo_blocking:
        description: "Enable geographic blocking (blocks non-US traffic)"
        required: false
        type: string
        default: "false"
      waf_enable_aws_managed_rules:
        description: "Enable AWS Managed Core Rule Set"
        required: false
        type: string
        default: "true"
    secrets:
      ACTIONS_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SNS_ALERT_EMAIL:
        required: true
      WAF_ALLOWED_IPS:
        required: false

jobs:
  action:
    runs-on: ${{ fromJSON(inputs.runner_config) }}
    timeout-minutes: 30  # Increased to accommodate both API and WAF deployments
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.ACTIONS_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Deploy API CloudFormation Stack
        id: deploy-stack
        run: |
          # Look up the hosted zone ID for the root domain
          HOSTED_ZONE_ID=$(aws route53 list-hosted-zones | jq -r ".HostedZones[] | select(.Name==\"${{ inputs.domain_name_root }}.\") | .Id" | cut -d'/' -f3)

          if [ -z "$HOSTED_ZONE_ID" ]; then
            echo "ERROR: No hosted zone found for domain ${{ inputs.domain_name_root }}"
            exit 1
          fi

          echo "Hosted zone configured for domain ${{ inputs.domain_name_root }}"

          if aws cloudformation describe-stacks --stack-name ${{ inputs.stack_name }} 2>&1 | grep -q 'Stack with id ${{ inputs.stack_name }} does not exist'; then
            STACK_ACTION="create-stack"
            echo "Creating new stack ${{ inputs.stack_name }}"
            echo "is_new_stack=true" >> $GITHUB_OUTPUT
          else
            STACK_ACTION="update-stack"
            echo "Updating existing stack ${{ inputs.stack_name }}"
            echo "is_new_stack=false" >> $GITHUB_OUTPUT
          fi

          API_STACK_PARAMS="ParameterKey=Environment,ParameterValue=${{ inputs.environment }} \
                ParameterKey=VpcId,ParameterValue=${{ inputs.vpc_id }} \
                ParameterKey=SubnetIds,ParameterValue=\"${{ inputs.subnet_ids }}\" \
                ParameterKey=PublicSubnetIds,ParameterValue=\"${{ inputs.public_subnet_ids }}\" \
                ParameterKey=ECRRepositoryUrl,ParameterValue=${{ inputs.ecr_repository_url }} \
                ParameterKey=ECRImageTag,ParameterValue=${{ inputs.ecr_image_tag }} \
                ParameterKey=DesiredCount,ParameterValue=${{ inputs.desired_count }} \
                ParameterKey=Cpu,ParameterValue=${{ inputs.cpu }} \
                ParameterKey=Memory,ParameterValue=${{ inputs.memory }} \
                ParameterKey=ValkeyUrl,ParameterValue=${{ inputs.valkey_url }} \
                ParameterKey=ValkeyClientSecurityGroupId,ParameterValue=${{ inputs.valkey_sg_id }} \
                ParameterKey=DomainName,ParameterValue=${{ inputs.domain_name }} \
                ParameterKey=RootDomainName,ParameterValue=${{ inputs.domain_name_root }} \
                ParameterKey=HostedZoneId,ParameterValue=$HOSTED_ZONE_ID \
                ParameterKey=JwtIssuer,ParameterValue=\"${{ inputs.jwt_issuer }}\" \
                ParameterKey=JwtAudience,ParameterValue=\"${{ inputs.jwt_audience }}\" \
                ParameterKey=MinCapacity,ParameterValue=${{ inputs.min_capacity }} \
                ParameterKey=MaxCapacity,ParameterValue=${{ inputs.max_capacity }} \
                ParameterKey=CPUTargetValue,ParameterValue=${{ inputs.cpu_target_value }} \
                ParameterKey=MemoryTargetValue,ParameterValue=${{ inputs.memory_target_value }} \
                ParameterKey=FargateSpotWeight,ParameterValue=${{ inputs.fargate_spot_weight }} \
                ParameterKey=FargateWeight,ParameterValue=${{ inputs.fargate_weight }} \
                ParameterKey=PrometheusStackName,ParameterValue=\"${{ inputs.prometheus_stack_name }}\" \
                ParameterKey=EmailFromAddress,ParameterValue="${{ secrets.AWS_SNS_ALERT_EMAIL }}""

          # Deploy or update the stack
          if [ "$STACK_ACTION" = "create-stack" ]; then
            # Create new stack
            aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.stack_name }} \
              --template-body file://cloudformation/api.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --parameters $API_STACK_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=API \
                Key=Repository,Value=${{ github.repository }} \
                Key=CreatedBy,Value=GitHubActions
          else
            # Update existing stack, handling "No updates" error
            UPDATE_OUTPUT=$(aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.stack_name }} \
              --template-body file://cloudformation/api.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --parameters $API_STACK_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=API \
                Key=Repository,Value=${{ github.repository }} \
                Key=CreatedBy,Value=GitHubActions 2>&1) || true

            # Check if the error was "No updates are to be performed"
            if echo "$UPDATE_OUTPUT" | grep -q "No updates are to be performed"; then
              echo "Stack is already up to date - no changes needed"
              echo "is_new_stack=false" >> $GITHUB_OUTPUT
            elif echo "$UPDATE_OUTPUT" | grep -q "error"; then
              echo "Error updating stack: $UPDATE_OUTPUT"
              exit 1
            else
              echo "Stack update initiated successfully"
              echo "is_new_stack=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Monitor Stack Deployment
        uses: ./.github/actions/monitor-stack-deployment
        with:
          stack-name: ${{ inputs.stack_name }}
          timeout: "1800"
          interval: "10"

      - name: Refresh ECS Service
        if: inputs.refresh_ecs_service == 'true' && steps.deploy-stack.outputs.is_new_stack != 'true'
        uses: ./.github/actions/refresh-ecs
        with:
          stack-name: ${{ inputs.stack_name }}
          skip-autoscale-refresh: "false"
          service-type: "api"
          max-wait-time: "600"
          service-stability-delay: "30"

      - name: Update Deployment Status
        if: always()
        run: |
          # Output deployment status for the main workflow
          if [ "${{ steps.deploy-stack.outputs.is_new_stack }}" == "true" ]; then
            echo "API stack creation completed"
          else
            echo "API stack update completed"
          fi

      - name: Deploy WAF Protection
        if: inputs.waf_enabled == 'true' && inputs.waf_stack_name != ''
        id: deploy-waf
        run: |
          echo "🛡️ Deploying WAF protection for API"

          # Get API ALB ARN from the API stack
          API_ALB_ARN=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.stack_name }} \
            --query "Stacks[0].Outputs[?OutputKey=='ApiALBArn'].OutputValue" \
            --output text 2>/dev/null || echo "")

          if [ -z "$API_ALB_ARN" ]; then
            echo "❌ Error: Could not find API ALB ARN from stack ${{ inputs.stack_name }}"
            exit 1
          fi

          echo "✅ API ALB ARN retrieved successfully"

          # Check if WAF stack exists
          if aws cloudformation describe-stacks --stack-name ${{ inputs.waf_stack_name }} 2>&1 | grep -q 'Stack with id ${{ inputs.waf_stack_name }} does not exist'; then
            STACK_ACTION="create-stack"
            echo "🚀 Creating new WAF stack: ${{ inputs.waf_stack_name }}"
          else
            STACK_ACTION="update-stack"
            echo "📝 Updating existing WAF stack: ${{ inputs.waf_stack_name }}"
          fi

          # Prepare WAF parameters
          WAF_PARAMS="ParameterKey=Environment,ParameterValue=${{ inputs.environment }}"
          WAF_PARAMS="$WAF_PARAMS ParameterKey=ApiAlbArn,ParameterValue='$API_ALB_ARN'"
          WAF_PARAMS="$WAF_PARAMS ParameterKey=RateLimitPerIP,ParameterValue=${{ inputs.waf_rate_limit_per_ip }}"
          WAF_PARAMS="$WAF_PARAMS ParameterKey=EnableGeoBlocking,ParameterValue=${{ inputs.waf_enable_geo_blocking }}"
          WAF_PARAMS="$WAF_PARAMS ParameterKey=EnableAwsManagedRules,ParameterValue=${{ inputs.waf_enable_aws_managed_rules }}"
          WAF_PARAMS="$WAF_PARAMS ParameterKey=AllowedIPs,ParameterValue='${{ secrets.WAF_ALLOWED_IPS || '0.0.0.0/32' }}'"

          # Deploy WAF stack
          if [ "$STACK_ACTION" = "create-stack" ]; then
            aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.waf_stack_name }} \
              --template-body file://cloudformation/waf.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --parameters $WAF_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=WAF \
                Key=ManagedBy,Value="GitHub Actions"

            # Wait for stack creation to complete
            echo "⏳ Waiting for WAF stack creation to complete..."
            aws cloudformation wait stack-create-complete \
              --stack-name ${{ inputs.waf_stack_name }} || {
              echo "❌ WAF stack creation failed"
              aws cloudformation describe-stack-events \
                --stack-name ${{ inputs.waf_stack_name }} \
                --query 'StackEvents[?ResourceStatus==`CREATE_FAILED`].[LogicalResourceId, ResourceStatusReason]' \
                --output table
              exit 1
            }
          else
            # For updates, check if there are actual changes
            UPDATE_OUTPUT=$(aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.waf_stack_name }} \
              --template-body file://cloudformation/waf.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --parameters $WAF_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=WAF \
                Key=ManagedBy,Value="GitHub Actions" \
              2>&1 || true)

            if echo "$UPDATE_OUTPUT" | grep -q "No updates are to be performed"; then
              echo "ℹ️ No changes detected in WAF stack"
            else
              # Wait for stack update to complete
              echo "⏳ Waiting for WAF stack update to complete..."
              aws cloudformation wait stack-update-complete \
                --stack-name ${{ inputs.waf_stack_name }} || {
                echo "❌ WAF stack update failed"
                aws cloudformation describe-stack-events \
                  --stack-name ${{ inputs.waf_stack_name }} \
                  --query 'StackEvents[?ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId, ResourceStatusReason]' \
                  --output table
                exit 1
              }
            fi
          fi

          echo "✅ WAF stack deployed successfully"

          # Get WAF outputs
          WEB_ACL_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.waf_stack_name }} \
            --query "Stacks[0].Outputs[?OutputKey=='WebACLId'].OutputValue" \
            --output text)
          ESTIMATED_COST=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.waf_stack_name }} \
            --query "Stacks[0].Outputs[?OutputKey=='EstimatedMonthlyCost'].OutputValue" \
            --output text)

          echo "🛡️ WAF Deployment Summary"
          echo "========================"
          echo "Web ACL configured successfully"
          echo "Protected ALB configured"
          echo "Rate Limit: ${{ inputs.waf_rate_limit_per_ip }} requests/5min"
          echo "Geo Blocking: ${{ inputs.waf_enable_geo_blocking }}"
          echo "AWS Managed Rules: ${{ inputs.waf_enable_aws_managed_rules }}"
          echo "💰 Estimated monthly cost: $ESTIMATED_COST"
