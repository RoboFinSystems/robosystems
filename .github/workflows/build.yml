name: Build

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      aws_region:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string
      publish_to_dockerhub:
        required: false
        type: boolean
        default: false
        description: "Whether to publish images to Docker Hub"
    outputs:
      image:
        description: "Built image reference"
        value: ${{ jobs.action.outputs.image }}
      ecr_repository_url:
        description: "ECR repository URL"
        value: ${{ jobs.action.outputs.ecr_repository_url }}
      version_tag:
        description: "Version tag used for the build"
        value: ${{ jobs.action.outputs.version_tag }}
      is_release:
        description: "Whether this is a release build"
        value: ${{ jobs.action.outputs.is_release }}
    secrets:
      ACTIONS_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DOCKERHUB_USERNAME:
      DOCKERHUB_TOKEN:

concurrency:
  group: robosystems-build
  cancel-in-progress: false

jobs:
  action:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build-and-push.outputs.image }}
      ecr_repository_url: ${{ steps.build-and-push.outputs.ecr_repository_url }}
      version_tag: ${{ steps.build-and-push.outputs.version_tag }}
      is_release: ${{ steps.build-and-push.outputs.is_release }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.ACTIONS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:master
            network=host

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: "true"

      - name: Login to Docker Hub
        if: ${{ inputs.publish_to_dockerhub == true }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build, tag, and push Docker image
        id: build-and-push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
        run: |
          # Enable BuildKit features
          export DOCKER_BUILDKIT=1
          export COMPOSE_DOCKER_CLI_BUILD=1

          # Prepare platforms
          PLATFORMS="linux/arm64"
          if [[ "${{ inputs.publish_to_dockerhub }}" == "true" ]]; then
            # Add amd64 for Docker Hub multi-arch support
            PLATFORMS="linux/amd64,linux/arm64"
          fi

          # Determine version information
          VERSION_TAG=""
          IS_RELEASE="false"

          # Check if this is a version tag (v*.*.*)
          if [[ "$GITHUB_REF" == refs/tags/v*.*.* ]]; then
            VERSION_TAG=${GITHUB_REF#refs/tags/}
            IS_RELEASE="true"
            echo "📦 Building release version: $VERSION_TAG"
          else
            # For non-release builds, use commit SHA
            VERSION_TAG="git-${GITHUB_SHA:0:8}"
            echo "🔧 Building development version: $VERSION_TAG"
          fi

          # Prepare tags
          TAGS=""

          # ECR tags (always push to ECR for internal use)
          TAGS="$TAGS -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.environment }}"
          TAGS="$TAGS -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG"

          if [[ "${{ inputs.environment }}" == "prod" ]]; then
            TAGS="$TAGS -t $ECR_REGISTRY/$ECR_REPOSITORY:latest"
          fi

          # Docker Hub tags (only for releases when explicitly enabled)
          if [[ "${{ inputs.publish_to_dockerhub }}" == "true" ]] && [[ "$IS_RELEASE" == "true" ]]; then
            echo "🚀 Publishing release to Docker Hub"
            if [[ "${{ inputs.environment }}" == "prod" ]]; then
              TAGS="$TAGS -t robofinsystems/robosystems:latest"
              TAGS="$TAGS -t robofinsystems/robosystems:$VERSION_TAG"
            fi
          elif [[ "${{ inputs.publish_to_dockerhub }}" == "true" ]]; then
            echo "⏭️ Skipping Docker Hub publication (non-release build)"
          fi

          # Build with enhanced caching including dependency layers
          docker buildx build \
            --platform $PLATFORMS \
            --push \
            --cache-from type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:buildcache \
            --cache-from type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:deps-cache \
            --cache-to type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:buildcache,mode=max \
            --cache-to type=registry,ref=$ECR_REGISTRY/$ECR_REPOSITORY:deps-cache,mode=max \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            --build-arg UV_CACHE_DIR=/tmp/uv-cache \
            $TAGS \
            -f Dockerfile .

          # Verify the image was pushed successfully to ECR
          aws ecr describe-images --repository-name $ECR_REPOSITORY --image-ids imageTag=${{ inputs.environment }} || exit 1
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:${{ inputs.environment }}" >> $GITHUB_OUTPUT
          echo "ecr_repository_url=$ECR_REGISTRY/$ECR_REPOSITORY" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

          # Log the tags that were created
          echo "📋 Image tags created:"
          echo "$TAGS" | tr ' ' '\n' | grep -E '^-t' | sed 's/-t /  - /'
