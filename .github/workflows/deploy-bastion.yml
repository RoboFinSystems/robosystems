name: Deploy Bastion Host

on:
  workflow_call:
    inputs:
      # Stack & Repository Configuration
      stack_name:
        description: "CloudFormation stack name"
        required: true
        type: string
      environment:
        description: "Environment to deploy to (prod, staging, or dev)"
        required: true
        type: string

      # GHA Runner Configuration
      runner_config:
        description: "GitHub Actions runner configuration (JSON array)"
        required: false
        type: string
        default: '["self-hosted", "Linux", "X64", "AL2023", "ci"]'

      # AWS Configuration
      aws_region:
        description: "AWS region for deployment"
        required: true
        type: string
      vpc_id:
        description: "VPC ID for bastion host deployment"
        required: true
        type: string
      public_subnet_ids:
        description: "Public subnet IDs for bastion host (comma-separated)"
        required: true
        type: string

      # Instance Configuration
      ami_id:
        description: "Amazon Linux 2023 ARM64 AMI ID for bastion host"
        required: false
        default: "ami-05ec8931dc5ae74ec"
        type: string

      # Security Groups
      valkey_sg_id:
        description: "Valkey client security group ID for accessing ElastiCache"
        required: false
        type: string
        default: ""

      # UserData Script Configuration
      deployment_bucket:
        description: "S3 bucket containing deployment scripts"
        required: false
        type: string
        default: ""
      userdata_script_key:
        description: "S3 key for Bastion UserData script"
        required: false
        type: string
        default: "userdata/bastion.sh"

    outputs:
      bastion_host_id:
        description: "Bastion Host Instance ID"
        value: ${{ jobs.action.outputs.bastion_host_id }}
      bastion_public_ip:
        description: "Bastion Host Public IP"
        value: ${{ jobs.action.outputs.bastion_public_ip }}
      bastion_security_group_id:
        description: "Bastion Host Security Group ID"
        value: ${{ jobs.action.outputs.bastion_security_group_id }}

    secrets:
      ACTIONS_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_EC2_KEY_NAME:
        required: true
      BASTION_ALLOWED_CIDR_BLOCK:
        required: true
      BASTION_ADDITIONAL_SSH_KEYS:
        required: false

jobs:
  action:
    runs-on: ${{ fromJSON(inputs.runner_config) }}
    timeout-minutes: 20
    outputs:
      bastion_host_id: ${{ steps.stack-outputs.outputs.bastion_host_id }}
      bastion_public_ip: ${{ steps.stack-outputs.outputs.bastion_public_ip }}
      bastion_security_group_id: ${{ steps.stack-outputs.outputs.bastion_security_group_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.ACTIONS_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Deploy Bastion CloudFormation Stack
        id: deploy-stack
        run: |
          if aws cloudformation describe-stacks --stack-name ${{ inputs.stack_name }} 2>&1 | grep -q 'Stack with id ${{ inputs.stack_name }} does not exist'; then
            STACK_ACTION="create-stack"
            echo "Creating new stack ${{ inputs.stack_name }}"
            echo "is_new_stack=true" >> $GITHUB_OUTPUT
          else
            STACK_ACTION="update-stack"
            echo "Updating existing stack ${{ inputs.stack_name }}"
            echo "is_new_stack=false" >> $GITHUB_OUTPUT
          fi

          # Set up parameters for bastion host
          # Extract first public subnet ID from comma-separated list
          PUBLIC_SUBNET_ID=$(echo "${{ inputs.public_subnet_ids }}" | cut -d',' -f1)
          echo "Using public subnet (configured)"

          BASTION_PARAMS="ParameterKey=Environment,ParameterValue=${{ inputs.environment }} \
                ParameterKey=VpcId,ParameterValue=${{ inputs.vpc_id }} \
                ParameterKey=PublicSubnetId,ParameterValue=$PUBLIC_SUBNET_ID \
                ParameterKey=AmiId,ParameterValue=${{ inputs.ami_id }} \
                ParameterKey=KeyPairName,ParameterValue=${{ secrets.AWS_EC2_KEY_NAME }} \
                ParameterKey=AllowedCidrBlock,ParameterValue=${{ secrets.BASTION_ALLOWED_CIDR_BLOCK }}"

          # Add Valkey client security group if provided
          if [ -n "${{ inputs.valkey_sg_id }}" ] && [ "${{ inputs.valkey_sg_id }}" != "" ]; then
            BASTION_PARAMS="$BASTION_PARAMS ParameterKey=ValkeySecurityGroupId,ParameterValue=${{ inputs.valkey_sg_id }}"
            echo "Adding Valkey client security group: ${{ inputs.valkey_sg_id }}"
          fi

          # Add additional SSH keys if provided
          if [ -n "${{ secrets.BASTION_ADDITIONAL_SSH_KEYS }}" ] && [ "${{ secrets.BASTION_ADDITIONAL_SSH_KEYS }}" != "" ]; then
            BASTION_PARAMS="$BASTION_PARAMS ParameterKey=AdditionalSSHKeys,ParameterValue=\"${{ secrets.BASTION_ADDITIONAL_SSH_KEYS }}\""
            echo "Adding additional SSH keys"
          fi

          # Add UserData script configuration if provided
          if [ -n "${{ inputs.deployment_bucket }}" ] && [ "${{ inputs.deployment_bucket }}" != "" ]; then
            BASTION_PARAMS="$BASTION_PARAMS ParameterKey=DeploymentBucket,ParameterValue=${{ inputs.deployment_bucket }}"
            echo "Adding deployment bucket: ${{ inputs.deployment_bucket }}"
          fi

          if [ -n "${{ inputs.userdata_script_key }}" ] && [ "${{ inputs.userdata_script_key }}" != "" ]; then
            BASTION_PARAMS="$BASTION_PARAMS ParameterKey=UserDataScriptKey,ParameterValue=${{ inputs.userdata_script_key }}"
            echo "Adding UserData script key: ${{ inputs.userdata_script_key }}"
          fi

          echo "Deploying bastion host with parameters:"
          echo "Environment: ${{ inputs.environment }}"
          echo "VPC configured"
          echo "Public Subnets: ${{ inputs.public_subnet_ids }}"

          # Deploy or update the stack
          if [ "$STACK_ACTION" = "create-stack" ]; then
            # Create new stack
            aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.stack_name }} \
              --template-body file://cloudformation/bastion.yaml \
              --capabilities CAPABILITY_IAM \
              --parameters $BASTION_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=Bastion \
                Key=Repository,Value=${{ github.repository }} \
                Key=CreatedBy,Value=GitHubActions
          else
            # Update existing stack, handling "No updates" error
            UPDATE_OUTPUT=$(aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.stack_name }} \
              --template-body file://cloudformation/bastion.yaml \
              --capabilities CAPABILITY_IAM \
              --parameters $BASTION_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=Bastion \
                Key=Repository,Value=${{ github.repository }} \
                Key=CreatedBy,Value=GitHubActions 2>&1) || true

            # Check if the error was "No updates are to be performed"
            if echo "$UPDATE_OUTPUT" | grep -q "No updates are to be performed"; then
              echo "Stack is already up to date - no changes needed"
              echo "is_new_stack=false" >> $GITHUB_OUTPUT
            elif echo "$UPDATE_OUTPUT" | grep -q "error"; then
              echo "Error updating stack: $UPDATE_OUTPUT"
              exit 1
            else
              echo "Stack update initiated successfully"
              echo "is_new_stack=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Monitor Stack Deployment
        uses: ./.github/actions/monitor-stack-deployment
        with:
          stack-name: ${{ inputs.stack_name }}
          timeout: "1800"
          interval: "10"

      - name: Get Stack Outputs
        id: stack-outputs
        run: |
          echo "Retrieving stack outputs..."

          # Get Bastion Host Instance ID
          BASTION_HOST_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.stack_name }} \
            --query "Stacks[0].Outputs[?OutputKey=='BastionHostId'].OutputValue" \
            --output text)

          if [ -n "$BASTION_HOST_ID" ]; then
            echo "bastion_host_id=$BASTION_HOST_ID" >> $GITHUB_OUTPUT
            echo "Bastion Host configured successfully"
          else
            echo "Error: Could not retrieve Bastion Host ID"
            exit 1
          fi

          # Get Bastion Public IP
          BASTION_PUBLIC_IP=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.stack_name }} \
            --query "Stacks[0].Outputs[?OutputKey=='BastionPublicIP'].OutputValue" \
            --output text)

          if [ -n "$BASTION_PUBLIC_IP" ]; then
            echo "bastion_public_ip=$BASTION_PUBLIC_IP" >> $GITHUB_OUTPUT
            echo "Bastion Public IP configured successfully"
          else
            echo "Error: Could not retrieve Bastion Public IP"
            exit 1
          fi

          # Get Bastion Security Group ID
          BASTION_SG_ID=$(aws cloudformation describe-stacks \
            --stack-name ${{ inputs.stack_name }} \
            --query "Stacks[0].Outputs[?OutputKey=='BastionSecurityGroupId'].OutputValue" \
            --output text)

          if [ -n "$BASTION_SG_ID" ]; then
            echo "bastion_security_group_id=$BASTION_SG_ID" >> $GITHUB_OUTPUT
            echo "Bastion Security Group configured successfully"
          else
            echo "Error: Could not retrieve Bastion Security Group ID"
            exit 1
          fi
