name: Deploy Worker Monitor Lambda

on:
  workflow_call:
    inputs:
      # Stack & Repository Configuration
      stack_name:
        description: "CloudFormation stack name"
        required: true
        type: string
      environment:
        description: "Environment to deploy to (prod, staging, or dev)"
        required: true
        type: string

      # GHA Runner Configuration
      runner_config:
        description: "GitHub Actions runner configuration (JSON array)"
        required: false
        type: string
        default: '["self-hosted", "Linux", "X64", "AL2023", "ci"]'

      # AWS Configuration
      aws_region:
        description: "AWS region for deployment"
        required: true
        type: string
      vpc_id:
        description: "VPC ID for Lambda"
        required: true
        type: string
      subnet_ids:
        description: "Private subnet IDs for Lambda (comma-separated)"
        required: true
        type: string

      # Valkey Configuration
      valkey_cluster_id:
        description: "ElastiCache Valkey cluster ID"
        required: true
        type: string
      valkey_sg_id:
        description: "Security group ID for Valkey access"
        required: true
        type: string

      # Lambda Configuration
      lambda_code_bucket:
        description: "S3 bucket containing Lambda deployment packages"
        required: false
        type: string
        default: ""

    outputs:
      lambda_function_arn:
        description: "ARN of the Worker Monitor Lambda function"
        value: ${{ jobs.action.outputs.lambda_function_arn }}
      lambda_function_name:
        description: "Name of the Worker Monitor Lambda function"
        value: ${{ jobs.action.outputs.lambda_function_name }}
      schedule_rule_arn:
        description: "ARN of the EventBridge schedule rule"
        value: ${{ jobs.action.outputs.schedule_rule_arn }}

    secrets:
      ACTIONS_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        description: "AWS Access Key ID for CloudFormation deployment"
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "AWS Secret Access Key for CloudFormation deployment"
        required: true

jobs:
  action:
    runs-on: ${{ fromJSON(inputs.runner_config) }}
    timeout-minutes: 15

    outputs:
      lambda_function_arn: ${{ steps.get-outputs.outputs.lambda_function_arn }}
      lambda_function_name: ${{ steps.get-outputs.outputs.lambda_function_name }}
      schedule_rule_arn: ${{ steps.get-outputs.outputs.schedule_rule_arn }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.ACTIONS_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Deploy Worker Monitor CloudFormation stack
        id: deploy-stack
        run: |
          # Check if stack exists
          if aws cloudformation describe-stacks --stack-name ${{ inputs.stack_name }} 2>&1 | grep -q 'Stack with id ${{ inputs.stack_name }} does not exist'; then
            STACK_ACTION="create-stack"
            echo "Creating new stack ${{ inputs.stack_name }}"
            echo "is_new_stack=true" >> $GITHUB_OUTPUT
          else
            STACK_ACTION="update-stack"
            echo "Updating existing stack ${{ inputs.stack_name }}"
            echo "is_new_stack=false" >> $GITHUB_OUTPUT
          fi

          # Build parameters
          STACK_PARAMS="ParameterKey=Environment,ParameterValue=${{ inputs.environment }} \
                ParameterKey=VpcId,ParameterValue=${{ inputs.vpc_id }} \
                ParameterKey=SubnetIds,ParameterValue=\"${{ inputs.subnet_ids }}\" \
                ParameterKey=ValkeyCacheClusterId,ParameterValue=${{ inputs.valkey_cluster_id }} \
                ParameterKey=ValkeySgId,ParameterValue=${{ inputs.valkey_sg_id }}"

          # Add Lambda bucket and fetch S3 key from manifest if provided
          if [ -n "${{ inputs.lambda_code_bucket }}" ]; then
            STACK_PARAMS="$STACK_PARAMS \
                  ParameterKey=LambdaCodeBucket,ParameterValue=${{ inputs.lambda_code_bucket }}"
            
            # Fetch S3 key from manifest (which includes hash in filename)
            MANIFEST=$(aws s3 cp s3://${{ inputs.lambda_code_bucket }}/lambda/manifest-${{ inputs.environment }}.json - 2>/dev/null || echo "{}")
            
            WORKER_MONITOR_KEY=$(echo "$MANIFEST" | jq -r '.Lambdas."worker-monitor".s3_key // empty')
            
            if [ -n "$WORKER_MONITOR_KEY" ]; then
              STACK_PARAMS="$STACK_PARAMS \
                    ParameterKey=WorkerMonitorCodeKey,ParameterValue=$WORKER_MONITOR_KEY"
            fi
          fi

          # Deploy or update the stack
          if [ "$STACK_ACTION" = "create-stack" ]; then
            # Create new stack
            aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.stack_name }} \
              --template-body file://cloudformation/worker-monitor.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --parameters $STACK_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=WorkerMonitor \
                Key=Repository,Value=${{ github.repository }} \
                Key=CreatedBy,Value=GitHubActions
          else
            # Update existing stack, handling "No updates" error
            UPDATE_OUTPUT=$(aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.stack_name }} \
              --template-body file://cloudformation/worker-monitor.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --parameters $STACK_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=WorkerMonitor \
                Key=Repository,Value=${{ github.repository }} \
                Key=CreatedBy,Value=GitHubActions 2>&1) || true

            # Check if the error was "No updates are to be performed"
            if echo "$UPDATE_OUTPUT" | grep -q "No updates are to be performed"; then
              echo "Stack is already up to date - no changes needed"
              echo "is_new_stack=false" >> $GITHUB_OUTPUT
            elif echo "$UPDATE_OUTPUT" | grep -q "error"; then
              echo "Error updating stack: $UPDATE_OUTPUT"
              exit 1
            else
              echo "Stack update initiated successfully"
              echo "is_new_stack=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Monitor Stack Deployment
        uses: ./.github/actions/monitor-stack-deployment
        with:
          stack-name: ${{ inputs.stack_name }}
          timeout: "600"
          interval: "10"

      - name: Get Stack Outputs
        id: get-outputs
        run: |
          # Get stack outputs after deployment
          STACK_OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name "${{ inputs.stack_name }}" \
            --query 'Stacks[0].Outputs' \
            --output json)

          # Extract outputs
          LAMBDA_ARN=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="LambdaFunctionArn") | .OutputValue // empty')
          LAMBDA_NAME=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="LambdaFunctionName") | .OutputValue // empty')
          SCHEDULE_RULE_ARN=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="ScheduleRuleArn") | .OutputValue // empty')

          # Set outputs
          echo "lambda_function_arn=${LAMBDA_ARN}" >> $GITHUB_OUTPUT
          echo "lambda_function_name=${LAMBDA_NAME}" >> $GITHUB_OUTPUT
          echo "schedule_rule_arn=${SCHEDULE_RULE_ARN}" >> $GITHUB_OUTPUT

          # Display outputs
          echo "ðŸ“Š Stack Outputs:"
          echo "  Lambda Function ARN configured"
          echo "  Lambda Function Name: ${LAMBDA_NAME}"
          echo "  Schedule Rule ARN configured"

      - name: Update Deployment Status
        if: always()
        run: |
          # Output deployment status for the main workflow
          if [ "${{ steps.deploy-stack.outputs.is_new_stack }}" == "true" ]; then
            echo "âœ… Worker Monitor Lambda created successfully"
          else
            echo "âœ… Worker Monitor Lambda updated successfully"
          fi