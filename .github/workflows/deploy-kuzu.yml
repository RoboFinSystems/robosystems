name: Deploy Kuzu Writers and Replicas

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: Environment to deploy to (staging/prod)
      runner_config:
        required: true
        type: string
        description: Runner configuration JSON
      aws_account_id:
        required: true
        type: string
        description: AWS account ID
      aws_region:
        required: true
        type: string
        description: AWS region
      vpc_id:
        required: true
        type: string
        description: VPC ID from deploy-vpc
      subnet_ids:
        required: true
        type: string
        description: Private subnet IDs
      public_subnet_ids:
        required: true
        type: string
        description: Public subnet IDs
      valkey_sg_id:
        required: true
        type: string
        description: Security Group ID for Valkey/Redis client access
      # Container Configuration
      ecr_image_tag:
        required: true
        type: string
        description: ECR image tag
      # Infrastructure inputs (from deploy-kuzu-infrastructure)
      secret_arn:
        required: true
        type: string
        description: Kuzu API secret ARN from infrastructure deployment
      volume_registry_table:
        required: true
        type: string
        description: DynamoDB volume registry table name from infrastructure deployment
      volume_manager_function_arn:
        required: true
        type: string
        description: Volume manager Lambda function ARN from infrastructure deployment
      volume_detachment_topic_arn:
        required: true
        type: string
        description: Volume detachment SNS topic ARN from infrastructure deployment
      # Kuzu Enable/Disable Configuration
      enterprise_enabled:
        required: false
        type: string
        description: Enable enterprise tier writers
        default: ""
      premium_enabled:
        required: false
        type: string
        description: Enable premium tier writers
        default: ""
      shared_replica_enabled:
        required: false
        type: string
        description: Enable shared replica deployment
        default: ""
    secrets:
      ACTIONS_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SNS_ALERT_EMAIL:
        required: true
    outputs:
      replica_alb_endpoint:
        description: Shared replica ALB endpoint URL
        value: ${{ jobs.deploy-shared-replicas.outputs.replica_alb_endpoint }}

jobs:
  # Step 1: Prepare Writer Matrix
  prepare-writer-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/configs/kuzu.yml
          sparse-checkout-cone-mode: false

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Prepare Writer Matrix
        id: set-matrix
        run: |
          # Determine environment key and set environment variables
          if [ "${{ inputs.environment }}" = "prod" ]; then
            ENV_KEY="production"
            ENV_SUFFIX="PROD"
            # Set environment variables for production
            export STANDARD_ENABLED_PROD="true"  # Always enabled
            export ENTERPRISE_ENABLED_PROD="${{ inputs.enterprise_enabled }}"
            export PREMIUM_ENABLED_PROD="${{ inputs.premium_enabled }}"
            export SHARED_MASTER_ENABLED_PROD="true"  # Always enabled
          else
            ENV_KEY="staging"
            ENV_SUFFIX="STAGING"
            # Set environment variables for staging
            export STANDARD_ENABLED_STAGING="true"  # Always enabled
            export ENTERPRISE_ENABLED_STAGING="${{ inputs.enterprise_enabled }}"
            export PREMIUM_ENABLED_STAGING="${{ inputs.premium_enabled }}"
            export SHARED_MASTER_ENABLED_STAGING="true"  # Always enabled
          fi

          echo "Loading Kuzu writer configuration for: $ENV_KEY"

          # Parse YAML and build matrix
          MATRIX_JSON=$(yq eval -o=json ".${ENV_KEY}.writers" .github/configs/kuzu.yml)

          # Filter based on enable variables
          FILTERED="[]"

          # Get number of writers
          WRITER_COUNT=$(echo "$MATRIX_JSON" | jq 'length')

          # Process each writer
          for i in $(seq 0 $((WRITER_COUNT - 1))); do
            writer=$(echo "$MATRIX_JSON" | jq --argjson idx "$i" '.[$idx]')
            ENABLE_VAR=$(echo "$writer" | jq -r '.deployment.enable_var')
            ENABLED_DEFAULT=$(echo "$writer" | jq -r '.deployment.enabled_default')
            ALWAYS_ENABLED=$(echo "$writer" | jq -r '.deployment.always_enabled // false')
            WRITER_NAME=$(echo "$writer" | jq -r '.name')

            # Check if should deploy
            SHOULD_DEPLOY="false"

            if [ "$ALWAYS_ENABLED" = "true" ]; then
              echo "  ✅ $WRITER_NAME is ALWAYS ENABLED"
              SHOULD_DEPLOY="true"
            else
              VAR_NAME="${ENABLE_VAR}"
              VAR_VALUE="${!VAR_NAME:-}"

              if [ "$VAR_VALUE" = "false" ]; then
                echo "  ❌ $VAR_NAME is explicitly disabled"
                SHOULD_DEPLOY="false"
              elif [ -n "$VAR_VALUE" ] && [ "$VAR_VALUE" != "false" ]; then
                echo "  ✅ $VAR_NAME is explicitly enabled"
                SHOULD_DEPLOY="true"
              elif [ "$ENABLED_DEFAULT" = "true" ]; then
                echo "  ✅ $VAR_NAME using default (enabled)"
                SHOULD_DEPLOY="true"
              else
                echo "  ❌ $VAR_NAME using default (disabled)"
                SHOULD_DEPLOY="false"
              fi
            fi

            if [ "$SHOULD_DEPLOY" = "true" ]; then
              # Build the matrix entry from writer config with nested instance specs
              MATRIX_ENTRY=$(echo "$writer" | jq '{
                name: .name,
                stack_suffix: .stack_suffix,
                tier: .tier,
                min_instances: .scaling.min,
                max_instances: .scaling.max,
                shared_repositories: .shared_repositories,
                instance_type: .instance.type,
                databases_per_instance: .instance.databases_per_instance,
                max_memory_mb: .instance.max_memory_mb,
                memory_per_db_mb: .instance.memory_per_db_mb,
                chunk_size: .instance.chunk_size,
                query_timeout: .instance.query_timeout,
                max_query_length: .instance.max_query_length,
                ingestion_batch_size: .instance.ingestion_batch_size,
                connection_pool_size: .instance.connection_pool_size
              }')

              # Append to filtered array
              FILTERED=$(echo "$FILTERED" | jq --argjson entry "$MATRIX_ENTRY" '. + [$entry]')
            fi
          done

          # Output the matrix
          MATRIX_OUTPUT=$(jq -nc --argjson filtered "$FILTERED" '{"include": $filtered}')
          echo "matrix=$MATRIX_OUTPUT" >> $GITHUB_OUTPUT

          # Debug output
          echo ""
          echo "Final writer matrix configuration:"
          echo "$FILTERED" | jq '.'

          # Summary
          WRITER_COUNT=$(echo "$FILTERED" | jq 'length')
          echo ""
          echo "📊 Deployment Summary: $WRITER_COUNT Kuzu writers will be deployed"

  # Step 2: Deploy Writers with Matrix
  deploy-writers:
    needs: [prepare-writer-matrix]
    if: needs.prepare-writer-matrix.outputs.matrix != '{"include":[]}'
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-writer-matrix.outputs.matrix) }}
      max-parallel: 4 # Deploy up to 4 writers in parallel
    uses: ./.github/workflows/deploy-kuzu-writers.yml
    with:
      # Stack & Repository Configuration
      stack_name: RoboSystemsKuzuWriters${{ matrix.stack_suffix }}${{ inputs.environment == 'prod' && 'Prod' || 'Staging' }}
      environment: ${{ inputs.environment }}
      # GHA Runner Configuration
      runner_config: ${{ inputs.runner_config }}
      # AWS Configuration
      aws_region: ${{ inputs.aws_region }}
      vpc_id: ${{ inputs.vpc_id }}
      subnet_ids: ${{ inputs.subnet_ids }}
      # Auto Scaling Configuration
      min_instances: "${{ matrix.min_instances }}"
      max_instances: "${{ matrix.max_instances }}"
      # Kuzu Configuration
      writer_tier: ${{ matrix.tier }}
      shared_repositories: ${{ matrix.shared_repositories }}
      # Instance Configuration
      instance_type: ${{ matrix.instance_type }}
      # Valkey Configuration
      valkey_sg_id: ${{ inputs.valkey_sg_id }}
      # Other Configuration
      ecr_image_tag: ${{ inputs.ecr_image_tag }}
      volume_detachment_topic_arn: ${{ inputs.volume_detachment_topic_arn }}
      volume_manager_function_arn: ${{ inputs.volume_manager_function_arn }}
    secrets:
      ACTIONS_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SNS_ALERT_EMAIL: ${{ secrets.AWS_SNS_ALERT_EMAIL }}

  # Step 3: Deploy Shared Replicas (if enabled)
  check-replica-config:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
      replica_config: ${{ steps.check.outputs.replica_config }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/configs/kuzu.yml
          sparse-checkout-cone-mode: false

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Check Replica Configuration
        id: check
        run: |
          # Determine environment key and set environment variables
          if [ "${{ inputs.environment }}" = "prod" ]; then
            ENV_KEY="production"
            ENABLE_VAR="SHARED_REPLICA_ENABLED_PROD"
            export SHARED_REPLICA_ENABLED_PROD="${{ inputs.shared_replica_enabled }}"
          else
            ENV_KEY="staging"
            ENABLE_VAR="SHARED_REPLICA_ENABLED_STAGING"
            export SHARED_REPLICA_ENABLED_STAGING="${{ inputs.shared_replica_enabled }}"
          fi

          # Get replica configuration
          REPLICA_CONFIG=$(yq eval -o=json ".${ENV_KEY}.replicas[0]" .github/configs/kuzu.yml)

          # Check if should deploy
          VAR_VALUE="${!ENABLE_VAR:-}"
          ENABLED_DEFAULT=$(echo "$REPLICA_CONFIG" | jq -r '.deployment.enabled_default')

          if [ "$VAR_VALUE" = "false" ]; then
            echo "❌ Shared replicas explicitly disabled"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          elif [ -n "$VAR_VALUE" ] && [ "$VAR_VALUE" != "false" ]; then
            echo "✅ Shared replicas explicitly enabled"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "replica_config=$REPLICA_CONFIG" >> $GITHUB_OUTPUT
          elif [ "$ENABLED_DEFAULT" = "true" ]; then
            echo "✅ Shared replicas using default (enabled)"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "replica_config=$REPLICA_CONFIG" >> $GITHUB_OUTPUT
          else
            echo "❌ Shared replicas using default (disabled)"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

  deploy-shared-replicas:
    needs: [check-replica-config]
    if: needs.check-replica-config.outputs.should_deploy == 'true'
    uses: ./.github/workflows/deploy-kuzu-shared-replicas.yml
    with:
      # Stack & Repository Configuration
      stack_name: RoboSystemsKuzuSharedReplicas${{ inputs.environment == 'prod' && 'Prod' || 'Staging' }}
      environment: ${{ inputs.environment }}
      # GHA Runner Configuration
      runner_config: ${{ inputs.runner_config }}
      # AWS Configuration
      aws_region: ${{ inputs.aws_region }}
      vpc_id: ${{ inputs.vpc_id }}
      subnet_ids: ${{ inputs.subnet_ids }}
      # Instance Configuration (from config)
      instance_type: ${{ fromJson(needs.check-replica-config.outputs.replica_config).instance_type }}
      # Auto Scaling Configuration
      min_instances: "${{ fromJson(needs.check-replica-config.outputs.replica_config).scaling.min }}"
      max_instances: "${{ fromJson(needs.check-replica-config.outputs.replica_config).scaling.max }}"
      desired_instances: "${{ fromJson(needs.check-replica-config.outputs.replica_config).scaling.desired }}"
      # Kuzu Configuration
      shared_repositories: ${{ fromJson(needs.check-replica-config.outputs.replica_config).shared_repositories }}
      # Other Configuration
      ecr_image_tag: ${{ inputs.ecr_image_tag }}
      lambda_code_bucket: robosystems-${{ inputs.environment }}-deployment
      volume_manager_function_arn: ${{ inputs.volume_manager_function_arn }}
    secrets:
      ACTIONS_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SNS_ALERT_EMAIL: ${{ secrets.AWS_SNS_ALERT_EMAIL }}
