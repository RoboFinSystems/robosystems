name: Run Database Migrations

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to run migrations"
        required: true
        type: choice
        options:
          - staging
          - prod
      migration_command:
        description: "Migration command (default: upgrade head)"
        required: false
        type: choice
        options:
          - "upgrade head"
          - "downgrade -1"
          - "current"
          - "history"
        default: "upgrade head"
      dry_run:
        description: "Show migration plan without applying"
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read
  actions: read

concurrency:
  group: database-migrations-${{ inputs.environment }}
  cancel-in-progress: false

jobs:
  check-runner-availability:
    runs-on: ubuntu-latest
    outputs:
      runner_config: ${{ steps.check.outputs.runner_config }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.ACTIONS_TOKEN }}

      - name: Check runner availability
        id: check
        uses: ./.github/actions/runner-availability
        with:
          runner_labels: "self-hosted,Linux,X64,AL2023,ci"
          timeout_minutes: "2"
          github_token: ${{ secrets.ACTIONS_TOKEN || github.token }}

  run-migrations:
    needs: [check-runner-availability]
    runs-on: ${{ fromJSON(needs.check-runner-availability.outputs.runner_config) }}
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.ACTIONS_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION || 'us-east-1' }}

      - name: Get bastion instance
        id: bastion
        run: |
          echo "üîç Finding bastion instance..."

          # Get bastion instance
          BASTION_INFO=$(aws ec2 describe-instances \
            --filters \
              "Name=tag:Name,Values=robosystems-bastion-host-${{ inputs.environment }}" \
              "Name=tag:Environment,Values=${{ inputs.environment }}" \
              "Name=tag:Service,Values=RoboSystems" \
              "Name=tag:Component,Values=Bastion" \
            --query "Reservations[].Instances[0].[InstanceId,State.Name,InstanceType]" \
            --output text)

          if [ -z "$BASTION_INFO" ] || [ "$BASTION_INFO" == "None" ]; then
            echo "‚ùå No bastion instance found for environment: ${{ inputs.environment }}"
            exit 1
          fi

          INSTANCE_ID=$(echo "$BASTION_INFO" | awk '{print $1}')
          INSTANCE_STATE=$(echo "$BASTION_INFO" | awk '{print $2}')
          INSTANCE_TYPE=$(echo "$BASTION_INFO" | awk '{print $3}')

          echo "Found bastion instance (state: $INSTANCE_STATE, type: $INSTANCE_TYPE)"

          # Warn if instance type is too small
          if [ "$INSTANCE_TYPE" == "t4g.nano" ]; then
            echo "‚ö†Ô∏è  WARNING: Bastion is t4g.nano which may be too small for migrations"
            echo "Consider updating to t4g.small or larger in CloudFormation"
          fi

          echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT
          echo "original_state=$INSTANCE_STATE" >> $GITHUB_OUTPUT

          # Start the instance if it's stopped
          if [ "$INSTANCE_STATE" == "stopped" ]; then
            echo "üöÄ Starting bastion instance..."
            aws ec2 start-instances --instance-ids "$INSTANCE_ID"

            # Wait for instance to be running
            echo "‚è≥ Waiting for instance to start..."
            aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"

            # Wait a bit more for SSM agent and Docker to be ready
            echo "‚è≥ Waiting for services to be ready..."
            sleep 45
          elif [ "$INSTANCE_STATE" == "stopping" ]; then
            echo "‚è≥ Waiting for instance to stop first..."
            aws ec2 wait instance-stopped --instance-ids "$INSTANCE_ID"

            echo "üöÄ Starting bastion instance..."
            aws ec2 start-instances --instance-ids "$INSTANCE_ID"
            aws ec2 wait instance-running --instance-ids "$INSTANCE_ID"
            sleep 45
          fi

          echo "‚úÖ Bastion instance is ready"

      - name: Run migrations
        id: migrate
        run: |
          echo "üöÄ Running database migrations..."

          # Build the command arguments properly
          if [ "${{ inputs.dry_run }}" == "true" ]; then
            FULL_COMMAND="sudo -u ec2-user /usr/local/bin/run-migrations.sh --command '${{ inputs.migration_command }}' --dry-run"
          else
            FULL_COMMAND="sudo -u ec2-user /usr/local/bin/run-migrations.sh --command '${{ inputs.migration_command }}'"
          fi

          echo "Command to run: $FULL_COMMAND"

          # Run the migration script on the bastion
          MIGRATION_COMMAND=$(aws ssm send-command \
            --instance-ids "${{ steps.bastion.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters "{\"commands\":[\"$FULL_COMMAND\"]}" \
            --query "Command.CommandId" \
            --output text)

          echo "command_id=$MIGRATION_COMMAND" >> $GITHUB_OUTPUT

          # Wait for completion
          echo "‚è≥ Waiting for migration to complete..."
          if aws ssm wait command-executed \
            --command-id "$MIGRATION_COMMAND" \
            --instance-id "${{ steps.bastion.outputs.instance_id }}"; then
            echo "‚úÖ Migration command completed"
          else
            echo "‚ùå Migration command failed or timed out"

            # Get error output
            ERROR_OUTPUT=$(aws ssm get-command-invocation \
              --command-id "$MIGRATION_COMMAND" \
              --instance-id "${{ steps.bastion.outputs.instance_id }}" \
              --query "StandardErrorContent" \
              --output text 2>/dev/null || echo "No error details available")

            echo "Error output:"
            echo "$ERROR_OUTPUT"
            exit 1
          fi

      - name: Get migration results
        if: always()
        run: |
          if [ -n "${{ steps.migrate.outputs.command_id }}" ]; then
            echo "üìã Migration output:"

            OUTPUT=$(aws ssm get-command-invocation \
              --command-id "${{ steps.migrate.outputs.command_id }}" \
              --instance-id "${{ steps.bastion.outputs.instance_id }}" \
              --query "StandardOutputContent" \
              --output text 2>/dev/null || echo "No output available")

            echo "$OUTPUT"

            # Check exit code
            EXIT_CODE=$(aws ssm get-command-invocation \
              --command-id "${{ steps.migrate.outputs.command_id }}" \
              --instance-id "${{ steps.bastion.outputs.instance_id }}" \
              --query "ResponseCode" \
              --output text 2>/dev/null || echo "-1")

            if [ "$EXIT_CODE" != "0" ]; then
              echo "‚ùå Migration failed with exit code: $EXIT_CODE"
              exit 1
            fi
          fi

      - name: Stop bastion if it was originally stopped
        if: always()
        run: |
          if [ "${{ steps.bastion.outputs.original_state }}" == "stopped" ]; then
            echo "üõë Stopping bastion instance (was originally stopped)..."
            aws ec2 stop-instances --instance-ids "${{ steps.bastion.outputs.instance_id }}"
            echo "‚úÖ Bastion instance stop command sent"
          else
            echo "‚ÑπÔ∏è Bastion was already running, leaving it running"
          fi

      - name: Summary
        if: always()
        run: |
          echo "### üóÑÔ∏è Database Migration Summary"
          echo ""
          echo "| Parameter | Value |"
          echo "|-----------|--------|"
          echo "| Environment | ${{ inputs.environment }} |"
          echo "| Command | alembic ${{ inputs.migration_command }} |"
          echo "| Dry Run | ${{ inputs.dry_run }} |"
          echo "| Bastion Instance | ${{ steps.bastion.outputs.instance_id || 'N/A' }} |"
          echo "| Status | ${{ job.status }} |"
          echo ""
          echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Triggered by: ${{ github.actor }}"
