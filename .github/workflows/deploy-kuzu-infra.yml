name: Deploy Kuzu Infrastructure

on:
  workflow_call:
    inputs:
      # Stack & Repository Configuration
      stack_name:
        description: "CloudFormation stack name"
        required: true
        type: string
      environment:
        description: "Environment to deploy to (prod, staging, or dev)"
        required: true
        type: string

      # GHA Runner Configuration
      runner_config:
        description: "GitHub Actions runner configuration (JSON array)"
        required: false
        type: string
        default: '["self-hosted", "Linux", "X64", "AL2023", "ci"]'

      # AWS Configuration
      aws_region:
        description: "AWS region for deployment"
        required: true
        type: string

      # Infrastructure Configuration
      enable_secret_rotation:
        description: "Enable automatic rotation of API keys"
        required: false
        type: string
        default: "false"
      rotation_schedule_days:
        description: "Number of days between API key rotations (when rotation is enabled)"
        required: false
        type: string
        default: "90"
      lambda_code_bucket:
        description: "S3 bucket containing Lambda deployment packages"
        required: false
        type: string
        default: ""
      graph_api_rotation_code_key:
        description: "S3 key for Kuzu API Rotation Lambda deployment package"
        required: false
        type: string
        default: ""
      instance_monitor_code_key:
        description: "S3 key for Instance Monitor Lambda deployment package"
        required: false
        type: string
        default: ""
    secrets:
      ACTIONS_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      AWS_SNS_ALERT_EMAIL:
        required: true
    outputs:
      secret_arn:
        description: "ARN of the Kuzu API authentication secret"
        value: ${{ jobs.action.outputs.secret_arn }}
      instance_registry_table:
        description: "DynamoDB table name for instance registry"
        value: ${{ jobs.action.outputs.instance_registry_table }}
      graph_registry_table:
        description: "DynamoDB table name for graph registry"
        value: ${{ jobs.action.outputs.graph_registry_table }}
      volume_registry_table:
        description: "DynamoDB table name for volume registry"
        value: ${{ jobs.action.outputs.volume_registry_table }}
      stack_name:
        description: "Name of the deployed stack"
        value: ${{ jobs.action.outputs.stack_name }}

jobs:
  action:
    runs-on: ${{ fromJSON(inputs.runner_config) }}
    timeout-minutes: 30
    outputs:
      secret_arn: ${{ steps.get-outputs.outputs.secret_arn }}
      instance_registry_table: ${{ steps.get-outputs.outputs.instance_registry_table }}
      graph_registry_table: ${{ steps.get-outputs.outputs.graph_registry_table }}
      volume_registry_table: ${{ steps.get-outputs.outputs.volume_registry_table }}
      stack_name: ${{ steps.get-outputs.outputs.stack_name }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.ACTIONS_TOKEN }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Deploy Kuzu Infrastructure CloudFormation stack
        id: deploy-stack
        run: |
          # Check if stack exists
          if aws cloudformation describe-stacks --stack-name ${{ inputs.stack_name }} 2>&1 | grep -q 'Stack with id ${{ inputs.stack_name }} does not exist'; then
            STACK_ACTION="create-stack"
            echo "Creating new stack ${{ inputs.stack_name }}"
            echo "is_new_stack=true" >> $GITHUB_OUTPUT
          else
            STACK_ACTION="update-stack"
            echo "Updating existing stack ${{ inputs.stack_name }}"
            echo "is_new_stack=false" >> $GITHUB_OUTPUT
          fi


          # Build parameters
          INFRA_STACK_PARAMS="ParameterKey=Environment,ParameterValue=${{ inputs.environment }} \
                ParameterKey=SNSAlertEmail,ParameterValue=${{ secrets.AWS_SNS_ALERT_EMAIL }} \
                ParameterKey=EnableSecretRotation,ParameterValue=${{ inputs.enable_secret_rotation }} \
                ParameterKey=RotationScheduleDays,ParameterValue=${{ inputs.rotation_schedule_days }}"
          
          # Add Lambda bucket and fetch S3 keys from manifest if provided
          if [ -n "${{ inputs.lambda_code_bucket }}" ]; then
            INFRA_STACK_PARAMS="$INFRA_STACK_PARAMS \
                  ParameterKey=LambdaCodeBucket,ParameterValue=${{ inputs.lambda_code_bucket }}"
            
            # Fetch S3 keys from manifest (which includes hashes in filenames)
            MANIFEST=$(aws s3 cp s3://${{ inputs.lambda_code_bucket }}/lambda/manifest-${{ inputs.environment }}.json - 2>/dev/null || echo "{}")
            
            ROTATION_KEY=$(echo "$MANIFEST" | jq -r '.Lambdas."kuzu-api-rotation".s3_key // empty')
            MONITOR_KEY=$(echo "$MANIFEST" | jq -r '.Lambdas."kuzu-instance-monitor".s3_key // empty')
            
            if [ -n "$ROTATION_KEY" ]; then
              INFRA_STACK_PARAMS="$INFRA_STACK_PARAMS \
                    ParameterKey=KuzuApiRotationCodeKey,ParameterValue=$ROTATION_KEY"
            fi
            
            if [ -n "$MONITOR_KEY" ]; then
              INFRA_STACK_PARAMS="$INFRA_STACK_PARAMS \
                    ParameterKey=InstanceMonitorCodeKey,ParameterValue=$MONITOR_KEY"
            fi
          fi

          # Deploy or update the stack
          if [ "$STACK_ACTION" = "create-stack" ]; then
            # Create new stack
            aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.stack_name }} \
              --template-body file://cloudformation/kuzu-infra.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --parameters $INFRA_STACK_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=KuzuInfra \
                Key=Repository,Value=${{ github.repository }} \
                Key=CreatedBy,Value=GitHubActions
          else
            # Update existing stack, handling "No updates" error
            UPDATE_OUTPUT=$(aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.stack_name }} \
              --template-body file://cloudformation/kuzu-infra.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --parameters $INFRA_STACK_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=KuzuInfra \
                Key=Repository,Value=${{ github.repository }} \
                Key=CreatedBy,Value=GitHubActions 2>&1) || true

            # Check if the error was "No updates are to be performed"
            if echo "$UPDATE_OUTPUT" | grep -q "No updates are to be performed"; then
              echo "Stack is already up to date - no changes needed"
              echo "is_new_stack=false" >> $GITHUB_OUTPUT
            elif echo "$UPDATE_OUTPUT" | grep -q "error"; then
              echo "Error updating stack: $UPDATE_OUTPUT"
              exit 1
            else
              echo "Stack update initiated successfully"
              echo "is_new_stack=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Monitor Stack Deployment
        uses: ./.github/actions/monitor-stack-deployment
        with:
          stack-name: ${{ inputs.stack_name }}
          timeout: "1800"
          interval: "10"

      - name: Get Stack Outputs
        id: get-outputs
        run: |
          # Get stack outputs after deployment
          STACK_OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name "${{ inputs.stack_name }}" \
            --query 'Stacks[0].Outputs' \
            --output json)

          # Extract outputs
          SECRET_ARN=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="SecretArn") | .OutputValue // empty')
          INSTANCE_REGISTRY_TABLE=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="InstanceRegistryTableName") | .OutputValue // empty')
          GRAPH_REGISTRY_TABLE=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="GraphRegistryTableName") | .OutputValue // empty')
          VOLUME_REGISTRY_TABLE=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="VolumeRegistryTableName") | .OutputValue // empty')

          # Set outputs
          echo "secret_arn=${SECRET_ARN}" >> $GITHUB_OUTPUT
          echo "instance_registry_table=${INSTANCE_REGISTRY_TABLE}" >> $GITHUB_OUTPUT
          echo "graph_registry_table=${GRAPH_REGISTRY_TABLE}" >> $GITHUB_OUTPUT
          echo "volume_registry_table=${VOLUME_REGISTRY_TABLE}" >> $GITHUB_OUTPUT
          echo "stack_name=${{ inputs.stack_name }}" >> $GITHUB_OUTPUT

          # Display outputs
          [ -n "$SECRET_ARN" ] && echo "🔐 Secret ARN: ${SECRET_ARN}"
          [ -n "$INSTANCE_REGISTRY_TABLE" ] && echo "📊 Instance Registry Table: ${INSTANCE_REGISTRY_TABLE}"
          [ -n "$GRAPH_REGISTRY_TABLE" ] && echo "📊 Graph Registry Table: ${GRAPH_REGISTRY_TABLE}"
          [ -n "$VOLUME_REGISTRY_TABLE" ] && echo "📊 Volume Registry Table: ${VOLUME_REGISTRY_TABLE}"

      - name: Update Deployment Status
        if: always()
        run: |
          # Output deployment status for the main workflow
          if [ "${{ steps.deploy-stack.outputs.is_new_stack }}" == "true" ]; then
            echo "Kuzu Infrastructure stack creation completed"
          else
            echo "Kuzu Infrastructure stack update completed"
          fi
