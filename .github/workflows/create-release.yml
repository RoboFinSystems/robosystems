name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: "Type of version bump"
        required: true
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch
      deploy_target:
        description: "Initial deployment target"
        required: true
        type: choice
        options:
          - staging
          - prod
          - all
          - none
        default: staging

jobs:
  create-branch:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      new_version: ${{ steps.new-version.outputs.new_version }}
      branch_name: ${{ steps.new-version.outputs.branch_name }}
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: main
          token: ${{ secrets.ACTIONS_TOKEN }}
          fetch-depth: 0

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        uses: astral-sh/setup-uv@v6

      - name: Get current version
        id: current-version
        run: |
          CURRENT_VERSION=$(awk -F'"' '/^version = / {print $2}' pyproject.toml)
          if [ -z "$CURRENT_VERSION" ]; then
            echo "Could not find version in pyproject.toml"
            exit 1
          fi
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
          VERSION_TYPE="${{ inputs.version_type }}"

          # Split version into major, minor, and patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

          # Increment appropriate version component
          if [ "$VERSION_TYPE" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$VERSION_TYPE" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          else # patch
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          BRANCH_NAME="release/$NEW_VERSION"

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
          echo "Branch name: $BRANCH_NAME"

      - name: Check if branch already exists
        id: check-branch
        run: |
          BRANCH_NAME="${{ steps.new-version.outputs.branch_name }}"

          # Check if branch exists locally or remotely
          if git show-ref --verify --quiet refs/heads/$BRANCH_NAME || git show-ref --verify --quiet refs/remotes/origin/$BRANCH_NAME; then
            echo "Branch $BRANCH_NAME already exists"
            echo "branch_exists=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "Branch $BRANCH_NAME does not exist, proceeding..."
            echo "branch_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Update main branch version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current_version }}"
          NEW_VERSION="${{ steps.new-version.outputs.new_version }}"

          echo "Updating main branch version from $CURRENT_VERSION to $NEW_VERSION"

          # Update version in pyproject.toml
          sed -i "s/^version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" pyproject.toml

          # Sync uv.lock file with the new version
          echo "Syncing uv.lock file..."
          uv sync --all-extras

          # Commit and push the version update to main
          git add pyproject.toml uv.lock
          git commit -m "Release v$NEW_VERSION"
          git push origin main

          echo "âœ… Main branch updated to version $NEW_VERSION with synced lock file"

      - name: Create release branch
        run: |
          BRANCH_NAME="${{ steps.new-version.outputs.branch_name }}"
          echo "Creating release branch: $BRANCH_NAME from updated main"

          # Create and checkout the release branch from current HEAD (updated main)
          git checkout -b "$BRANCH_NAME"

          # Push the release branch
          git push origin "$BRANCH_NAME"

          echo "âœ… Release branch $BRANCH_NAME created and pushed"

  create-tag:
    needs: create-branch
    permissions:
      contents: write
    uses: ./.github/workflows/tag-release.yml
    with:
      branch_ref: ${{ needs.create-branch.outputs.branch_name }}
    secrets: inherit

  deploy:
    needs: [create-branch, create-tag]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.ACTIONS_TOKEN }}

      - name: Trigger deployment
        if: ${{ inputs.deploy_target != 'none' }}
        env:
          GH_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
        run: |
          DEPLOY_TARGET="${{ inputs.deploy_target }}"
          TAG_NAME="${{ needs.create-tag.outputs.tag_name }}"

          echo "ðŸš€ Triggering deployment to $DEPLOY_TARGET from git tag $TAG_NAME..."

          if [ "$DEPLOY_TARGET" = "staging" ]; then
            gh workflow run staging.yml --ref "$TAG_NAME"
            echo "âœ… Staging deployment triggered for tag $TAG_NAME"
          elif [ "$DEPLOY_TARGET" = "prod" ]; then
            gh workflow run prod.yml --ref "$TAG_NAME"
            echo "âœ… Production deployment triggered for tag $TAG_NAME"
          elif [ "$DEPLOY_TARGET" = "all" ]; then
            echo "ðŸš€ Triggering deployment to both staging and production..."
            gh workflow run staging.yml --ref "$TAG_NAME"
            echo "âœ… Staging deployment triggered for tag $TAG_NAME"
            gh workflow run prod.yml --ref "$TAG_NAME"
            echo "âœ… Production deployment triggered for tag $TAG_NAME"
          fi

  create-summary:
    needs: [create-branch, create-tag, deploy]
    if: always()
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - name: Create summary
        run: |
          echo "## ðŸš€ Release Created and Deployed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.create-tag.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** \`${{ needs.create-tag.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ needs.create-branch.outputs.branch_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deploy Target:** ${{ inputs.deploy_target }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ needs.create-tag.outputs.release_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ inputs.deploy_target }}" = "staging" ]; then
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Staging deployment has been triggered from tag ${{ needs.create-tag.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
            echo "2. Test the release in staging environment" >> $GITHUB_STEP_SUMMARY
            echo "3. When ready for production, deploy from the git tag: \`gh workflow run prod.yml --ref ${{ needs.create-tag.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ inputs.deploy_target }}" = "prod" ]; then
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Production deployment has been triggered from tag ${{ needs.create-tag.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
            echo "2. Monitor the deployment: \`gh run list --workflow=prod.yml\`" >> $GITHUB_STEP_SUMMARY
            echo "3. The git tag ${{ needs.create-tag.outputs.tag_name }} is now available for future deployments" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ inputs.deploy_target }}" = "all" ]; then
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Both staging and production deployments have been triggered from tag ${{ needs.create-tag.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
            echo "2. Monitor deployments: \`gh run list\`" >> $GITHUB_STEP_SUMMARY
            echo "3. The git tag ${{ needs.create-tag.outputs.tag_name }} is now available for future deployments" >> $GITHUB_STEP_SUMMARY
          else
            echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. The release tag ${{ needs.create-tag.outputs.tag_name }} has been created but not deployed" >> $GITHUB_STEP_SUMMARY
            echo "2. To deploy to staging: \`gh workflow run staging.yml --ref ${{ needs.create-tag.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
            echo "3. To deploy to production: \`gh workflow run prod.yml --ref ${{ needs.create-tag.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          fi
