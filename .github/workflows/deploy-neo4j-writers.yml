name: Deploy Neo4j Writers

on:
  workflow_call:
    inputs:
      # Stack & Repository Configuration
      stack_name:
        description: "CloudFormation stack name"
        required: true
        type: string
      environment:
        description: "Environment to deploy to (prod, staging, or dev)"
        required: true
        type: string

      # GHA Runner Configuration
      runner_config:
        description: "GitHub Actions runner configuration (JSON array)"
        required: false
        type: string
        default: '["self-hosted", "Linux", "X64", "AL2023", "ci"]'

      # AWS Configuration
      aws_region:
        description: "AWS region for deployment"
        required: true
        type: string
      vpc_id:
        description: "VPC ID for deployment"
        required: true
        type: string
      subnet_ids:
        description: "Comma-separated list of private subnet IDs for instances (minimum 2 required)"
        required: true
        type: string
      valkey_sg_id:
        description: "Security Group ID for Valkey/Redis client access"
        required: true
        type: string

      # Instance Configuration
      ami_id:
        description: "Amazon Linux 2023 ARM64 AMI ID"
        required: false
        default: "ami-05ec8931dc5ae74ec"
        type: string

      # Auto Scaling Configuration
      min_instances:
        description: "Minimum number of instances"
        required: true
        type: string
      max_instances:
        description: "Maximum number of instances"
        required: true
        type: string

      # Neo4j Configuration
      writer_tier:
        description: "Writer tier (enterprise, premium)"
        required: false
        type: string
        default: "enterprise"
      neo4j_version:
        description: "Neo4j Community Edition version"
        required: false
        type: string
        default: "5.15.0"

      # Tier Specifications (from kuzu.yml)
      instance_type:
        description: "EC2 instance type for this tier"
        required: true
        type: string

      # Volume Management
      volume_detachment_topic_arn:
        description: "ARN of the Volume Detachment SNS topic from volumes stack"
        required: true
        type: string
      volume_manager_function_arn:
        description: "ARN of the Volume Manager Lambda function from volumes stack"
        required: true
        type: string

    outputs:
      # Neo4j Writer Outputs
      security_group_id:
        description: "Security Group ID for Neo4j writers"
        value: ${{ jobs.action.outputs.security_group_id }}
      instance_role_arn:
        description: "IAM Role ARN for Neo4j writer instances"
        value: ${{ jobs.action.outputs.instance_role_arn }}
      writer_asg_name:
        description: "Auto Scaling Group Name for writers"
        value: ${{ jobs.action.outputs.writer_asg_name }}
      bolt_endpoint:
        description: "Neo4j Bolt protocol endpoint"
        value: ${{ jobs.action.outputs.bolt_endpoint }}

    secrets:
      ACTIONS_TOKEN:
        required: true
      AWS_ACCESS_KEY_ID:
        description: "AWS Access Key ID for CloudFormation deployment"
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "AWS Secret Access Key for CloudFormation deployment"
        required: true
      AWS_SNS_ALERT_EMAIL:
        required: true

jobs:
  action:
    runs-on: ${{ fromJSON(inputs.runner_config) }}
    timeout-minutes: 30

    outputs:
      security_group_id: ${{ steps.get-outputs.outputs.security_group_id }}
      instance_role_arn: ${{ steps.get-outputs.outputs.instance_role_arn }}
      writer_asg_name: ${{ steps.get-outputs.outputs.writer_asg_name }}
      bolt_endpoint: ${{ steps.get-outputs.outputs.bolt_endpoint }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.ref }}
          token: ${{ secrets.ACTIONS_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Configure ASG parameters
        id: asg_config
        run: |
          echo "üéØ Configuring ASG for Neo4j tier: ${{ inputs.writer_tier }} in environment: ${{ inputs.environment }}"

          # Use direct inputs for ASG configuration
          MIN_INSTANCES="${{ inputs.min_instances }}"
          MAX_INSTANCES="${{ inputs.max_instances }}"

          echo "min_instances=$MIN_INSTANCES" >> $GITHUB_OUTPUT
          echo "max_instances=$MAX_INSTANCES" >> $GITHUB_OUTPUT

          echo "üìä ASG Configuration for ${{ inputs.writer_tier }} tier:"
          echo "  Min: $MIN_INSTANCES"
          echo "  Max: $MAX_INSTANCES"

      - name: Select Availability Zone for Persistent Volumes
        id: az_selection
        run: |
          echo "üåê Selecting availability zone for deployment..."
          echo "‚ö†Ô∏è  IMPORTANT: Neo4j writers use persistent EBS volumes that are AZ-specific"

          # Neo4j Enterprise/Premium tiers need consistent AZ to ensure volume persistence
          # EBS volumes cannot be moved between AZs, so instance replacement in a different AZ
          # means data loss unless we restrict to a single AZ

          echo "üìç Selecting single AZ for Neo4j ${{ inputs.writer_tier }} tier to ensure volume persistence"

          # Use zone C for ALL tiers to consolidate resources
          PREFERRED_AZ="${{ inputs.aws_region }}c"

          echo "üìç Preferred AZ for ${{ inputs.writer_tier }} tier: $PREFERRED_AZ"

          # Get all subnet IDs and their AZs
          IFS=',' read -ra SUBNET_ARRAY <<< "${{ inputs.subnet_ids }}"

          # Find the subnet in the preferred AZ
          SELECTED_SUBNET=""
          for subnet in "${SUBNET_ARRAY[@]}"; do
            SUBNET_AZ=$(aws ec2 describe-subnets --subnet-ids "$subnet" --query 'Subnets[0].AvailabilityZone' --output text)
            echo "  Checking subnet $subnet in AZ $SUBNET_AZ"

            if [ "$SUBNET_AZ" = "$PREFERRED_AZ" ]; then
              SELECTED_SUBNET="$subnet"
              echo "‚úÖ Found subnet $subnet in preferred AZ $PREFERRED_AZ"
              break
            fi
          done

          # If no subnet found in preferred AZ, use the first available one
          if [ -z "$SELECTED_SUBNET" ]; then
            SELECTED_SUBNET="${SUBNET_ARRAY[0]}"
            SELECTED_AZ=$(aws ec2 describe-subnets --subnet-ids "$SELECTED_SUBNET" --query 'Subnets[0].AvailabilityZone' --output text)
            echo "‚ö†Ô∏è  No subnet found in $PREFERRED_AZ, using $SELECTED_SUBNET in $SELECTED_AZ"
            echo "selected_az=$SELECTED_AZ" >> $GITHUB_OUTPUT
          else
            echo "selected_az=$PREFERRED_AZ" >> $GITHUB_OUTPUT
          fi

          echo "selected_subnet=$SELECTED_SUBNET" >> $GITHUB_OUTPUT
          echo "use_single_subnet=true" >> $GITHUB_OUTPUT

          echo "üìä Neo4j Writer Tier AZ Configuration for ${{ inputs.writer_tier }}:"
          echo "  Subnet: $SELECTED_SUBNET"
          echo "  Availability Zone: ${SELECTED_AZ:-$PREFERRED_AZ}"
          echo "  ‚ö†Ô∏è  All instances and volumes will be created in this single AZ"
          echo ""
          echo "‚ö†Ô∏è  TRADE-OFF: Single AZ reduces availability but ensures data persistence"
          echo "  - Pro: Volumes can always be reattached after instance replacement"
          echo "  - Con: No multi-AZ redundancy (AZ failure affects this tier)"

      - name: Deploy Neo4j Writers CloudFormation stack
        id: deploy-stack
        run: |
          # Check if stack exists
          if aws cloudformation describe-stacks --stack-name ${{ inputs.stack_name }} 2>&1 | grep -q 'Stack with id ${{ inputs.stack_name }} does not exist'; then
            STACK_ACTION="create-stack"
            echo "Creating new stack ${{ inputs.stack_name }}"
            echo "is_new_stack=true" >> $GITHUB_OUTPUT
          else
            STACK_ACTION="update-stack"
            echo "Updating existing stack ${{ inputs.stack_name }}"
            echo "is_new_stack=false" >> $GITHUB_OUTPUT
          fi

          # Build parameters
          # Use selected subnet for single-AZ deployment
          SUBNET_PARAM="${{ steps.az_selection.outputs.selected_subnet }}"

          NEO4J_STACK_PARAMS="ParameterKey=Environment,ParameterValue=${{ inputs.environment }} \
                ParameterKey=SNSAlertEmail,ParameterValue=${{ secrets.AWS_SNS_ALERT_EMAIL }} \
                ParameterKey=VpcId,ParameterValue=${{ inputs.vpc_id }} \
                ParameterKey=VpcCidr,ParameterValue=\"10.0.0.0/16\" \
                ParameterKey=SubnetIds,ParameterValue=\"$SUBNET_PARAM\" \
                ParameterKey=ValkeyClientSecurityGroupId,ParameterValue=${{ inputs.valkey_sg_id }} \
                ParameterKey=AmiId,ParameterValue=${{ inputs.ami_id }} \
                ParameterKey=WriterTier,ParameterValue=${{ inputs.writer_tier }} \
                ParameterKey=Neo4jVersion,ParameterValue=${{ inputs.neo4j_version }} \
                ParameterKey=MinInstances,ParameterValue=${{ inputs.min_instances }} \
                ParameterKey=MaxInstances,ParameterValue=${{ inputs.max_instances }} \
                ParameterKey=InstanceType,ParameterValue=${{ inputs.instance_type }} \
                ParameterKey=VolumeDetachmentTopicArn,ParameterValue=\"${{ inputs.volume_detachment_topic_arn }}\" \
                ParameterKey=VolumeManagerFunctionArn,ParameterValue=\"${{ inputs.volume_manager_function_arn }}\" \
                ParameterKey=ServiceTag,ParameterValue=\"RoboSystems\" \
                ParameterKey=ComponentTag,ParameterValue=\"Neo4jWriter\""

          # Deploy or update the stack
          if [ "$STACK_ACTION" = "create-stack" ]; then
            # Create new stack
            aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.stack_name }} \
              --template-body file://cloudformation/neo4j-writers.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --parameters $NEO4J_STACK_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=Neo4jWriter \
                Key=Repository,Value=${{ github.repository }} \
                Key=CreatedBy,Value=GitHubActions
          else
            # Update existing stack, handling "No updates" error
            UPDATE_OUTPUT=$(aws cloudformation $STACK_ACTION \
              --stack-name ${{ inputs.stack_name }} \
              --template-body file://cloudformation/neo4j-writers.yaml \
              --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
              --parameters $NEO4J_STACK_PARAMS \
              --tags \
                Key=Environment,Value=${{ inputs.environment }} \
                Key=Service,Value=RoboSystems \
                Key=Component,Value=Neo4jWriter \
                Key=Repository,Value=${{ github.repository }} \
                Key=CreatedBy,Value=GitHubActions 2>&1) || true

            # Check if the error was "No updates are to be performed"
            if echo "$UPDATE_OUTPUT" | grep -q "No updates are to be performed"; then
              echo "Stack is already up to date - no changes needed"
              echo "is_new_stack=false" >> $GITHUB_OUTPUT
            elif echo "$UPDATE_OUTPUT" | grep -q "error"; then
              echo "Error updating stack: $UPDATE_OUTPUT"
              exit 1
            else
              echo "Stack update initiated successfully"
              echo "is_new_stack=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Monitor Stack Deployment
        uses: ./.github/actions/monitor-stack-deployment
        with:
          stack-name: ${{ inputs.stack_name }}
          timeout: "1800"
          interval: "10"

      - name: Get Stack Outputs
        id: get-outputs
        run: |
          # Get stack outputs after deployment
          STACK_OUTPUTS=$(aws cloudformation describe-stacks \
            --stack-name "${{ inputs.stack_name }}" \
            --query 'Stacks[0].Outputs' \
            --output json)

          # Extract outputs from CloudFormation stack
          WRITER_ASG_NAME=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="WriterAutoScalingGroupName") | .OutputValue // empty')
          SECURITY_GROUP_ID=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="WriterSecurityGroupId") | .OutputValue // empty')
          BOLT_ENDPOINT=$(echo "$STACK_OUTPUTS" | jq -r '.[] | select(.OutputKey=="Neo4jBoltEndpoint") | .OutputValue // empty')

          # Set outputs
          echo "writer_asg_name=${WRITER_ASG_NAME}" >> $GITHUB_OUTPUT
          echo "security_group_id=${SECURITY_GROUP_ID}" >> $GITHUB_OUTPUT
          echo "bolt_endpoint=${BOLT_ENDPOINT}" >> $GITHUB_OUTPUT

          if [ -n "$WRITER_ASG_NAME" ]; then
            echo "üè¢ Writer ASG: ${WRITER_ASG_NAME}"
          fi
          if [ -n "$BOLT_ENDPOINT" ]; then
            echo "üîå Neo4j Bolt Endpoint: ${BOLT_ENDPOINT}"
          fi

      - name: Update Deployment Status
        if: always()
        run: |
          # Output deployment status for the main workflow
          if [ "${{ steps.deploy-stack.outputs.is_new_stack }}" == "true" ]; then
            echo "‚úÖ Neo4j Writers stack creation completed"
          else
            echo "‚úÖ Neo4j Writers stack update completed"
          fi
